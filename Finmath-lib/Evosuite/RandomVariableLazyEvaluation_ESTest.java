/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 21 14:54:09 GMT 2022
 */

package net.finmath.montecarlo;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.function.DoubleBinaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.Function;
import java.util.function.IntToDoubleFunction;
import net.finmath.functions.DoubleTernaryOperator;
import net.finmath.integration.PiecewiseContantDoubleUnaryOperator;
import net.finmath.interpolation.RationalFunctionInterpolation;
import net.finmath.montecarlo.RandomVariableFromDoubleArray;
import net.finmath.montecarlo.RandomVariableLazyEvaluation;
import net.finmath.stochastic.RandomOperator;
import net.finmath.stochastic.RandomVariable;
import net.finmath.stochastic.RandomVariableArray;
import net.finmath.stochastic.RandomVariableArrayImplementation;
import net.finmath.stochastic.Scalar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RandomVariableLazyEvaluation_ESTest extends RandomVariableLazyEvaluation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 84;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.19454771280288696, 84, 0.19454771280288696);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.19454771280288696;
      doubleArray0[1] = (double) 84;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation1 = new RandomVariableLazyEvaluation(0.19454771280288696, doubleArray0);
      randomVariableLazyEvaluation0.addRatio(randomVariableLazyEvaluation1, randomVariableLazyEvaluation1);
      DoubleTernaryOperator doubleTernaryOperator0 = mock(DoubleTernaryOperator.class, new ViolatedAssumptionAnswer());
      Scalar scalar0 = new Scalar(0.19454771280288696);
      RandomVariable randomVariable0 = scalar0.discount(randomVariableLazyEvaluation1, 84);
      scalar0.vid((double) 84);
      RandomVariable randomVariable1 = scalar0.cap((RandomVariable) randomVariableLazyEvaluation0);
      randomVariableLazyEvaluation0.apply(doubleTernaryOperator0, randomVariable1, randomVariable1);
      DoubleBinaryOperator doubleBinaryOperator0 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      RandomVariable randomVariable2 = scalar0.exp();
      RandomVariable randomVariable3 = scalar0.addRatio(randomVariable1, randomVariable2);
      randomVariableLazyEvaluation0.apply(doubleBinaryOperator0, (RandomVariable) scalar0);
      RandomVariable randomVariable4 = randomVariableLazyEvaluation0.sub(randomVariable1);
      randomVariableLazyEvaluation0.div((RandomVariable) scalar0);
      RandomVariableFromDoubleArray randomVariableFromDoubleArray0 = randomVariableLazyEvaluation0.getRandomVariable();
      randomVariableLazyEvaluation0.apply((DoubleBinaryOperator) null, (DoubleBinaryOperator) null, (RandomVariable) randomVariableFromDoubleArray0, randomVariable2);
      randomVariableLazyEvaluation0.getVariance();
      randomVariableLazyEvaluation0.floor(0.19454771280288696);
      randomVariableLazyEvaluation0.subRatio(randomVariable1, randomVariableFromDoubleArray0);
      randomVariableLazyEvaluation0.addRatio(randomVariable2, randomVariableFromDoubleArray0);
      randomVariableLazyEvaluation1.getRealizationsStream();
      randomVariableLazyEvaluation0.cache();
      randomVariableLazyEvaluation1.getHistogram(84, 0.19454771280288696);
      randomVariableLazyEvaluation1.addRatio(randomVariable3, randomVariable4);
      randomVariableLazyEvaluation1.cap((-541.5556375));
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.getVariance(randomVariable0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, doubleArray0);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation1 = new RandomVariableLazyEvaluation(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      randomVariableLazyEvaluation1.invert();
      RandomVariable randomVariable0 = randomVariableLazyEvaluation1.sin();
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.addProduct((RandomVariable) randomVariableLazyEvaluation1, 1.0);
      randomVariableLazyEvaluation1.sin();
      randomVariableLazyEvaluation1.isDeterministic();
      double[] doubleArray1 = randomVariableLazyEvaluation0.getRealizations();
      randomVariableLazyEvaluation1.isDeterministic();
      randomVariableLazyEvaluation1.getStandardDeviation();
      randomVariableLazyEvaluation1.size();
      randomVariableLazyEvaluation1.getOperator();
      randomVariableLazyEvaluation0.getVariance();
      randomVariableLazyEvaluation0.getHistogram(doubleArray1);
      randomVariableLazyEvaluation1.sqrt();
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation1.addRatio(randomVariable1, randomVariable0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-449.8686143689944));
      randomVariableLazyEvaluation0.cap((-1.0));
      randomVariableLazyEvaluation0.getQuantile(Double.NaN);
      Scalar scalar0 = new Scalar(0.0);
      randomVariableLazyEvaluation0.getMin();
      RandomVariable randomVariable0 = scalar0.add((RandomVariable) randomVariableLazyEvaluation0);
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.add(randomVariable0);
      randomVariableLazyEvaluation0.isDeterministic();
      randomVariableLazyEvaluation0.getQuantileExpectation(2792.2319695, 2.0);
      randomVariableLazyEvaluation0.exp();
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.pow(7842.325115);
      randomVariableLazyEvaluation0.getStandardDeviation();
      RandomVariable randomVariable3 = randomVariableLazyEvaluation0.cos();
      randomVariableLazyEvaluation0.abs();
      RandomVariable randomVariable4 = randomVariableLazyEvaluation0.squared();
      randomVariableLazyEvaluation0.doubleValue();
      Scalar scalar1 = new Scalar((-3328.34));
      RandomVariable randomVariable5 = scalar1.invert();
      randomVariableLazyEvaluation0.addProduct(randomVariable5, randomVariable2);
      RandomVariable randomVariable6 = randomVariableLazyEvaluation0.cap(2152.4147898326);
      randomVariableLazyEvaluation0.getRealizations();
      randomVariableLazyEvaluation0.mult(randomVariable4);
      randomVariable6.equals((RandomVariable) randomVariableLazyEvaluation0);
      randomVariable3.add(randomVariable1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(1064.05614855643, 7, 7);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.sin();
      randomVariableLazyEvaluation0.getStandardError();
      double double0 = 3472.3477412;
      double double1 = 0.0;
      double double2 = (-1579.21448012862);
      RandomVariable randomVariable1 = randomVariable0.pow(double2);
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.addProduct(randomVariable0, randomVariable0);
      randomVariableLazyEvaluation0.getQuantileExpectation(double0, double1);
      RandomVariable randomVariable3 = randomVariableLazyEvaluation0.invert();
      randomVariableLazyEvaluation0.getAverage(randomVariable1);
      randomVariableLazyEvaluation0.addRatio(randomVariable0, randomVariable0);
      randomVariableLazyEvaluation0.getStandardError(randomVariable0);
      double double3 = randomVariableLazyEvaluation0.getVariance(randomVariable3);
      randomVariableLazyEvaluation0.getAverage(randomVariable3);
      double double4 = randomVariableLazyEvaluation0.getFiltrationTime();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = double4;
      double double5 = 0.0;
      doubleArray0[1] = double5;
      double double6 = 1.0;
      doubleArray0[2] = double6;
      doubleArray0[3] = double3;
      doubleArray0[4] = double1;
      randomVariableLazyEvaluation0.getHistogram(doubleArray0);
      randomVariable0.mult(doubleArray0[2]);
      randomVariableLazyEvaluation0.add(randomVariable2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-868.00185), 1935.4563268822683);
      Scalar scalar0 = new Scalar(1.25);
      RandomVariable randomVariable0 = scalar0.mult((RandomVariable) randomVariableLazyEvaluation0);
      randomVariableLazyEvaluation0.vid(randomVariable0);
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.pow(375.17414);
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.addProduct(randomVariable1, (-868.00185));
      randomVariable2.bus((RandomVariable) randomVariableLazyEvaluation0);
      RandomVariable randomVariable3 = randomVariableLazyEvaluation0.average();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-868.00185);
      doubleArray0[1] = (-868.00185);
      doubleArray0[2] = 1.25;
      doubleArray0[3] = 1935.4563268822683;
      RationalFunctionInterpolation.InterpolationMethod rationalFunctionInterpolation_InterpolationMethod0 = RationalFunctionInterpolation.InterpolationMethod.CUBIC_SPLINE;
      RandomVariable randomVariable4 = randomVariableLazyEvaluation0.discount(randomVariable1, 375.17414);
      randomVariable4.choose(randomVariable0, randomVariable3);
      RationalFunctionInterpolation.ExtrapolationMethod rationalFunctionInterpolation_ExtrapolationMethod0 = RationalFunctionInterpolation.ExtrapolationMethod.CONSTANT;
      RationalFunctionInterpolation rationalFunctionInterpolation0 = new RationalFunctionInterpolation(doubleArray0, doubleArray0, rationalFunctionInterpolation_InterpolationMethod0, rationalFunctionInterpolation_ExtrapolationMethod0);
      randomVariableLazyEvaluation0.apply((DoubleUnaryOperator) rationalFunctionInterpolation0);
      randomVariableLazyEvaluation0.cap(1.25);
      randomVariableLazyEvaluation0.getRealizations();
      randomVariableLazyEvaluation0.getRealizationsStream();
      randomVariableLazyEvaluation0.getVariance();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(1064.05614855643, 7, 7);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.sin();
      randomVariableLazyEvaluation0.getOperator();
      randomVariableLazyEvaluation0.getStandardError();
      randomVariableLazyEvaluation0.addProduct(randomVariable0, randomVariable0);
      randomVariableLazyEvaluation0.getQuantileExpectation(3472.3477412, 0.0);
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.invert();
      randomVariableLazyEvaluation0.getAverage(randomVariable0);
      randomVariableLazyEvaluation0.addRatio(randomVariable0, randomVariable0);
      randomVariableLazyEvaluation0.getStandardError(randomVariable0);
      randomVariableLazyEvaluation0.getVariance(randomVariable1);
      randomVariable1.getSampleVariance();
      randomVariableLazyEvaluation0.getAverage(randomVariable1);
      randomVariableLazyEvaluation0.getFiltrationTime();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1064.05614855643;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      randomVariableLazyEvaluation0.getHistogram(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(1064.05614855643, 7, 7);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.sin();
      randomVariableLazyEvaluation0.getStandardError();
      randomVariable0.pow((-1579.21448012862));
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.addProduct(randomVariable0, randomVariable0);
      randomVariableLazyEvaluation0.getQuantileExpectation(3472.3477412, 0.0);
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.invert();
      randomVariableLazyEvaluation0.getAverage(randomVariable0);
      randomVariableLazyEvaluation0.addRatio(randomVariable0, randomVariable0);
      randomVariableLazyEvaluation0.getStandardError(randomVariable0);
      randomVariableLazyEvaluation0.getVariance(randomVariable2);
      randomVariableLazyEvaluation0.getAverage(randomVariable2);
      randomVariableLazyEvaluation0.getFiltrationTime();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1064.05614855643;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      randomVariableLazyEvaluation0.getHistogram(doubleArray0);
      randomVariable0.mult(1.0);
      randomVariableLazyEvaluation0.add(randomVariable1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, 0, 0.0);
      Scalar scalar0 = new Scalar(1166.42815977);
      scalar0.mult((double) 0);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.squared();
      RandomVariable randomVariable1 = scalar0.cap((RandomVariable) scalar0);
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.sub(randomVariable1);
      randomVariableLazyEvaluation0.getRealizationsStream();
      randomVariableLazyEvaluation0.squared();
      randomVariableLazyEvaluation0.getVariance();
      RandomVariable randomVariable3 = randomVariableLazyEvaluation0.cap(randomVariable0);
      randomVariableLazyEvaluation0.getFiltrationTime();
      RandomOperator randomOperator0 = RandomOperator.identity();
      RandomVariable randomVariable4 = randomOperator0.apply(randomVariable3);
      randomVariableLazyEvaluation0.cap(randomVariable4);
      RandomVariable randomVariable5 = randomVariableLazyEvaluation0.abs();
      randomVariableLazyEvaluation0.getStandardDeviation(randomVariable0);
      randomVariableLazyEvaluation0.squared();
      RandomVariable randomVariable6 = randomVariableLazyEvaluation0.addProduct(randomVariable4, randomVariable0);
      randomVariableLazyEvaluation0.sub(1166.42815977);
      randomVariableLazyEvaluation0.vid(randomVariable4);
      randomVariableLazyEvaluation0.getTypePriority();
      randomVariableLazyEvaluation0.getRealizations();
      RandomVariable randomVariable7 = randomVariableLazyEvaluation0.apply((DoubleBinaryOperator) null, (DoubleBinaryOperator) null, randomVariable2, randomVariable5);
      randomVariable7.getAverage(randomVariable6);
      randomVariable6.getStandardDeviation();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(2464.0, 861, 1064.05614855643);
      randomVariableLazyEvaluation0.getVariance();
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.isNaN();
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.sin();
      randomVariableLazyEvaluation0.getVariance();
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.floor(1.6763806343078613E-8);
      RandomVariable randomVariable3 = randomVariableLazyEvaluation0.sub(randomVariable1);
      randomVariable3.floor(2464.0);
      DoubleBinaryOperator doubleBinaryOperator0 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.apply(doubleBinaryOperator0, doubleBinaryOperator0, randomVariable2, randomVariable0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, 0.0);
      Scalar scalar0 = new Scalar(1166.42815977);
      scalar0.mult((double) 0);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.squared();
      RandomVariable randomVariable1 = scalar0.cap((RandomVariable) scalar0);
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.sub(randomVariable1);
      randomVariableLazyEvaluation0.getRealizationsStream();
      randomVariableLazyEvaluation0.squared();
      randomVariableLazyEvaluation0.getVariance();
      RandomVariable randomVariable3 = randomVariableLazyEvaluation0.cap(randomVariable0);
      randomVariableLazyEvaluation0.getFiltrationTime();
      RandomOperator randomOperator0 = RandomOperator.identity();
      RandomVariable randomVariable4 = randomOperator0.apply(randomVariable3);
      randomVariableLazyEvaluation0.cap(randomVariable4);
      RandomVariable randomVariable5 = randomVariableLazyEvaluation0.abs();
      randomVariableLazyEvaluation0.getStandardDeviation(randomVariable0);
      randomVariableLazyEvaluation0.squared();
      randomVariableLazyEvaluation0.addProduct(randomVariable4, randomVariable0);
      randomVariableLazyEvaluation0.sub(1166.42815977);
      randomVariableLazyEvaluation0.vid(randomVariable4);
      randomVariableLazyEvaluation0.getTypePriority();
      randomVariableLazyEvaluation0.getRealizations();
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.apply((DoubleBinaryOperator) null, (DoubleBinaryOperator) null, randomVariable2, randomVariable5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Scalar scalar0 = new Scalar(339.930521539336);
      scalar0.getOperator();
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0, 0, 0);
      RandomVariable randomVariable0 = scalar0.expm1();
      randomVariableLazyEvaluation0.getVariance((RandomVariable) scalar0);
      randomVariableLazyEvaluation0.cos();
      randomVariableLazyEvaluation0.discount(randomVariable0, 0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, doubleArray0);
      DoubleTernaryOperator doubleTernaryOperator0 = mock(DoubleTernaryOperator.class, new ViolatedAssumptionAnswer());
      Scalar scalar0 = new Scalar(0.16666666666745392);
      randomVariableLazyEvaluation0.cap((RandomVariable) scalar0);
      randomVariableLazyEvaluation0.cap((RandomVariable) scalar0);
      scalar0.addProduct((RandomVariable) randomVariableLazyEvaluation0, 7.0);
      RandomVariable randomVariable0 = scalar0.div(0.16666666666745392);
      RandomVariable randomVariable1 = scalar0.sin();
      randomVariableLazyEvaluation0.add((RandomVariable) scalar0);
      randomVariableLazyEvaluation0.apply(doubleTernaryOperator0, randomVariable1, (RandomVariable) scalar0);
      randomVariableLazyEvaluation0.getRandomVariable();
      randomVariableLazyEvaluation0.sub(7.0);
      RandomVariableFromDoubleArray randomVariableFromDoubleArray0 = randomVariableLazyEvaluation0.getRandomVariable();
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.mult((-2760.4));
      randomVariableLazyEvaluation0.getStandardDeviation((RandomVariable) randomVariableFromDoubleArray0);
      RandomVariable randomVariable3 = randomVariableLazyEvaluation0.add(randomVariable2);
      DoubleBinaryOperator doubleBinaryOperator0 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      randomVariableLazyEvaluation0.apply(doubleBinaryOperator0, randomVariable0);
      randomVariableLazyEvaluation0.cos();
      randomVariableLazyEvaluation0.div(randomVariable3);
      RandomVariable randomVariable4 = randomVariableLazyEvaluation0.sub(randomVariable0);
      randomVariableLazyEvaluation0.exp();
      DoubleTernaryOperator doubleTernaryOperator1 = mock(DoubleTernaryOperator.class, new ViolatedAssumptionAnswer());
      randomVariableLazyEvaluation0.apply(doubleTernaryOperator1, randomVariable4, randomVariable3);
      DoubleUnaryOperator doubleUnaryOperator0 = DoubleUnaryOperator.identity();
      randomVariableLazyEvaluation0.apply(doubleUnaryOperator0);
      randomVariableLazyEvaluation0.cos();
      randomVariableLazyEvaluation0.cap(randomVariable0);
      randomVariableLazyEvaluation0.getRealizations();
      randomVariableLazyEvaluation0.getVariance();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = 2.0;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(2.0, 2.0);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation1 = new RandomVariableLazyEvaluation(Double.POSITIVE_INFINITY, (-2737), 2.0);
      randomVariableLazyEvaluation0.isNaN();
      randomVariableLazyEvaluation1.average();
      randomVariableLazyEvaluation1.squared();
      randomVariableLazyEvaluation0.discount(randomVariableLazyEvaluation1, Double.POSITIVE_INFINITY);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation1.getQuantile(229.084);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2738
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(2464.0, 861, 1064.05614855643);
      randomVariableLazyEvaluation0.getVariance();
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.isNaN();
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.sin();
      randomVariableLazyEvaluation0.getVariance();
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.floor(1.6763806343078613E-8);
      randomVariableLazyEvaluation0.sub(randomVariable1);
      DoubleBinaryOperator doubleBinaryOperator0 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(1.6763806343078613E-8, 2464.0, 1.0, (-1.0), (double)861).when(doubleBinaryOperator0).applyAsDouble(anyDouble() , anyDouble());
      RandomVariable randomVariable3 = randomVariableLazyEvaluation0.apply(doubleBinaryOperator0, doubleBinaryOperator0, randomVariable2, randomVariable0);
      randomVariableLazyEvaluation0.getStandardDeviation(randomVariable3);
      // Undeclared exception!
      randomVariableLazyEvaluation0.getStandardError(randomVariable0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(371.0, 252, 2597.89229);
      double[] doubleArray0 = new double[1];
      RandomVariableLazyEvaluation randomVariableLazyEvaluation1 = new RandomVariableLazyEvaluation(randomVariableLazyEvaluation0);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.mult((RandomVariable) randomVariableLazyEvaluation1);
      doubleArray0[0] = (double) 252;
      randomVariableLazyEvaluation0.getHistogram(doubleArray0);
      Scalar scalar0 = new Scalar(252.0);
      randomVariableLazyEvaluation1.cap((RandomVariable) scalar0);
      RandomVariable randomVariable1 = scalar0.add((-2360.306667597798));
      randomVariableLazyEvaluation0.equals(randomVariable1);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation1.sub(randomVariable0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DoubleBinaryOperator doubleBinaryOperator0 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      Scalar scalar0 = new Scalar((-1.0));
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, (-277), 0.0);
      randomVariableLazyEvaluation0.addProduct((RandomVariable) scalar0, 2.0);
      Scalar scalar1 = new Scalar(0.0);
      randomVariableLazyEvaluation0.sqrt();
      randomVariableLazyEvaluation0.add((-3873.7746));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, 1074, 1074);
      randomVariableLazyEvaluation0.getSampleVariance();
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.getHistogram(0, (double) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(1.5574076175689697, 1028, 751.698);
      randomVariableLazyEvaluation0.getQuantile((-1145.373866447911));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(2464.0, 861, 1064.05614855643);
      randomVariableLazyEvaluation0.getVariance();
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.isNaN();
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.sin();
      randomVariableLazyEvaluation0.getVariance();
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.floor(1.6763806343078613E-8);
      randomVariableLazyEvaluation0.sub(randomVariable1);
      DoubleBinaryOperator doubleBinaryOperator0 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.apply(doubleBinaryOperator0, doubleBinaryOperator0, randomVariable2, randomVariable0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(1181.4446427133, 126, (-551.4092317348849));
      RandomVariableLazyEvaluation randomVariableLazyEvaluation1 = new RandomVariableLazyEvaluation((-551.4092317348849), (-2015.84334372155));
      randomVariableLazyEvaluation0.getVariance((RandomVariable) randomVariableLazyEvaluation1);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.expand(1);
      randomVariableLazyEvaluation0.covariance(randomVariableLazyEvaluation1);
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.sqrt();
      randomVariableLazyEvaluation1.accrue(randomVariable1, 240.3985);
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.cache();
      randomVariableLazyEvaluation0.getStandardError(randomVariable2);
      randomVariableLazyEvaluation0.equals(randomVariable0);
      randomVariableLazyEvaluation0.addProduct(randomVariable0, randomVariable0);
      DoubleBinaryOperator doubleBinaryOperator0 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(doubleBinaryOperator0).applyAsDouble(anyDouble() , anyDouble());
      RandomVariable randomVariable3 = randomVariableLazyEvaluation1.apply(doubleBinaryOperator0, randomVariable2);
      RandomVariable randomVariable4 = randomVariableLazyEvaluation1.isNaN();
      randomVariableLazyEvaluation0.getHistogram(1, (-2015.84334372155));
      randomVariableLazyEvaluation1.cos();
      randomVariableLazyEvaluation1.getStandardDeviation(randomVariable4);
      randomVariableLazyEvaluation0.cap(randomVariable4);
      randomVariableLazyEvaluation1.vid(randomVariable3);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation1.getHistogram((-1509), (-1.9615727678378536E16));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(1.7976931348623157E308, (-1.7976931348623157E308));
      Scalar scalar0 = new Scalar(0.0);
      RandomVariable randomVariable0 = scalar0.mult((RandomVariable) randomVariableLazyEvaluation0);
      randomVariableLazyEvaluation0.getVariance(randomVariable0);
      randomVariableLazyEvaluation0.sub(0.0);
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.expand(0);
      DoubleBinaryOperator doubleBinaryOperator0 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.apply(doubleBinaryOperator0, doubleBinaryOperator0, randomVariable1, randomVariable1);
      randomVariableLazyEvaluation0.pow(1543.8449);
      randomVariableLazyEvaluation0.getHistogram(2358, (-1.0));
      randomVariableLazyEvaluation0.getStandardDeviation();
      randomVariableLazyEvaluation0.log();
      // Undeclared exception!
      try { 
        randomVariable2.getRealizations();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation$17", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-1525.4897928757));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1525.4897928757);
      doubleArray0[1] = (-1525.4897928757);
      doubleArray0[2] = (-1525.4897928757);
      doubleArray0[3] = (-1525.4897928757);
      doubleArray0[4] = (-1525.4897928757);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation1 = new RandomVariableLazyEvaluation((-1525.4897928757), doubleArray0);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.addProduct((RandomVariable) randomVariableLazyEvaluation1, (RandomVariable) randomVariableLazyEvaluation1);
      randomVariable0.getStandardError((RandomVariable) randomVariableLazyEvaluation1);
      randomVariable0.abs();
      randomVariableLazyEvaluation1.addProduct((RandomVariable) randomVariableLazyEvaluation0, 694.1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Scalar scalar0 = new Scalar((-521.483566435));
      scalar0.getOperator();
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(Double.NaN, (IntToDoubleFunction) null, (-2854));
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.apply((DoubleBinaryOperator) null, (RandomVariable) scalar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, 420.52214);
      randomVariableLazyEvaluation0.getQuantile(1.0);
      randomVariableLazyEvaluation0.getQuantile(0.0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.discount((RandomVariable) null, 48.324255953);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DoubleTernaryOperator doubleTernaryOperator0 = mock(DoubleTernaryOperator.class, new ViolatedAssumptionAnswer());
      DoubleTernaryOperator doubleTernaryOperator1 = mock(DoubleTernaryOperator.class, new ViolatedAssumptionAnswer());
      Scalar scalar0 = new Scalar(349.825135609508);
      Scalar scalar1 = new Scalar(349.825135609508);
      Scalar scalar2 = new Scalar(349.825135609508);
      DoubleTernaryOperator doubleTernaryOperator2 = mock(DoubleTernaryOperator.class, new ViolatedAssumptionAnswer());
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-1656.2900927), 0, 1230.0);
      randomVariableLazyEvaluation0.add((RandomVariable) scalar1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(2464.0, 861, 1064.05614855643);
      randomVariableLazyEvaluation0.getVariance();
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.isNaN();
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.sin();
      randomVariableLazyEvaluation0.getVariance();
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.floor(1.6763806343078613E-8);
      randomVariableLazyEvaluation0.sub(randomVariable1);
      DoubleBinaryOperator doubleBinaryOperator0 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(doubleBinaryOperator0).applyAsDouble(anyDouble() , anyDouble());
      RandomVariable randomVariable3 = randomVariableLazyEvaluation0.apply(doubleBinaryOperator0, doubleBinaryOperator0, randomVariable2, randomVariable0);
      randomVariableLazyEvaluation0.getVariance();
      randomVariableLazyEvaluation0.getStandardDeviation(randomVariable3);
      // Undeclared exception!
      randomVariableLazyEvaluation0.getStandardError(randomVariable0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-868.00185), 1935.4563268822683);
      Scalar scalar0 = new Scalar(1.25);
      RandomVariable randomVariable0 = scalar0.mult((RandomVariable) randomVariableLazyEvaluation0);
      randomVariableLazyEvaluation0.vid(randomVariable0);
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.pow(375.17414);
      randomVariableLazyEvaluation0.addProduct(randomVariable1, (-868.00185));
      randomVariableLazyEvaluation0.average();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-868.00185);
      doubleArray0[1] = (-868.00185);
      doubleArray0[2] = 1.25;
      doubleArray0[3] = 1935.4563268822683;
      RationalFunctionInterpolation.InterpolationMethod rationalFunctionInterpolation_InterpolationMethod0 = RationalFunctionInterpolation.InterpolationMethod.CUBIC_SPLINE;
      randomVariableLazyEvaluation0.discount(randomVariable1, 375.17414);
      RationalFunctionInterpolation.ExtrapolationMethod rationalFunctionInterpolation_ExtrapolationMethod0 = RationalFunctionInterpolation.ExtrapolationMethod.CONSTANT;
      RationalFunctionInterpolation rationalFunctionInterpolation0 = new RationalFunctionInterpolation(doubleArray0, doubleArray0, rationalFunctionInterpolation_InterpolationMethod0, rationalFunctionInterpolation_ExtrapolationMethod0);
      randomVariableLazyEvaluation0.apply((DoubleUnaryOperator) rationalFunctionInterpolation0);
      randomVariableLazyEvaluation0.cap(1.25);
      randomVariableLazyEvaluation0.getRealizations();
      randomVariableLazyEvaluation0.getRealizationsStream();
      randomVariableLazyEvaluation0.getVariance();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = (-5215.297375364208);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(2912.976141227832, (-5215.297375364208));
      randomVariableLazyEvaluation0.getVariance((RandomVariable) null);
      double double1 = 7185.1183;
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.addProduct((RandomVariable) null, 7185.1183);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = 0.0;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, (-1), 0.0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.subRatio((RandomVariable) null, (RandomVariable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 8;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(1779.2, 8, 1779.2);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 8;
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = 1779.2;
      doubleArray1[1] = (-1451.12203468183);
      doubleArray1[2] = (double) 8;
      RationalFunctionInterpolation.InterpolationMethod rationalFunctionInterpolation_InterpolationMethod0 = RationalFunctionInterpolation.InterpolationMethod.AKIMA_CONTINUOUS;
      randomVariableLazyEvaluation0.cache();
      RationalFunctionInterpolation.ExtrapolationMethod rationalFunctionInterpolation_ExtrapolationMethod0 = RationalFunctionInterpolation.ExtrapolationMethod.LINEAR;
      RationalFunctionInterpolation rationalFunctionInterpolation0 = new RationalFunctionInterpolation(doubleArray0, doubleArray1, rationalFunctionInterpolation_InterpolationMethod0, rationalFunctionInterpolation_ExtrapolationMethod0);
      randomVariableLazyEvaluation0.apply((DoubleUnaryOperator) rationalFunctionInterpolation0);
      Scalar scalar0 = new Scalar(1779.2);
      RandomVariable randomVariable0 = scalar0.add((RandomVariable) randomVariableLazyEvaluation0);
      randomVariableLazyEvaluation0.getStandardError(randomVariable0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      PiecewiseContantDoubleUnaryOperator piecewiseContantDoubleUnaryOperator0 = null;
      try {
        piecewiseContantDoubleUnaryOperator0 = new PiecewiseContantDoubleUnaryOperator(linkedList0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length of values must equal length of intervalRightPoints + 1.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-1596.8440646017), (-631), (-631));
      randomVariableLazyEvaluation0.exp();
      RandomVariableLazyEvaluation randomVariableLazyEvaluation1 = new RandomVariableLazyEvaluation((-1596.8440646017), (-631), (-1596.8440646017));
      randomVariableLazyEvaluation0.div(437.98768494);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 354.1974673;
      doubleArray0[1] = 354.1974673;
      doubleArray0[2] = 354.1974673;
      doubleArray0[3] = 354.1974673;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(354.1974673, doubleArray0);
      Scalar scalar0 = new Scalar(354.1974673);
      RandomVariable randomVariable0 = scalar0.floor(0.0);
      randomVariableLazyEvaluation0.getStandardDeviation(randomVariable0);
      Scalar scalar1 = new Scalar(2085.368);
      RandomVariable randomVariable1 = scalar1.mult((RandomVariable) randomVariableLazyEvaluation0);
      scalar1.mult((RandomVariable) randomVariableLazyEvaluation0);
      scalar1.subRatio(randomVariableLazyEvaluation0, randomVariable1);
      randomVariableLazyEvaluation0.subRatio(scalar1, scalar1);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.getQuantile(0.0, (RandomVariable) scalar1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method not implemented.
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Scalar scalar0 = new Scalar(2457.684960645);
      scalar0.getOperator();
      RandomVariable randomVariable0 = scalar0.add((-1008.19813918));
      RandomVariable randomVariable1 = scalar0.bus(3016.14);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(3016.14, (IntToDoubleFunction) null, (-261));
      RandomVariable[] randomVariableArray0 = new RandomVariable[5];
      randomVariableArray0[0] = (RandomVariable) scalar0;
      randomVariableArray0[1] = randomVariable0;
      randomVariableArray0[2] = randomVariable1;
      randomVariableArray0[3] = randomVariable1;
      randomVariableArray0[4] = randomVariable0;
      randomVariableLazyEvaluation0.addSumProduct(randomVariableArray0, randomVariableArray0);
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.sub(randomVariable0);
      randomVariableLazyEvaluation0.getTypePriority();
      randomVariableLazyEvaluation0.getOperator();
      randomVariableLazyEvaluation0.getRandomVariable();
      randomVariableLazyEvaluation0.abs();
      randomVariableLazyEvaluation0.pow((-2718.10923816));
      RandomVariable randomVariable3 = randomVariableLazyEvaluation0.bus(randomVariable2);
      randomVariableLazyEvaluation0.sin();
      scalar0.addRatio(randomVariable0, randomVariableLazyEvaluation0);
      randomVariableLazyEvaluation0.sub(randomVariable0);
      randomVariableLazyEvaluation0.getRealizationsStream();
      randomVariableLazyEvaluation0.getTypePriority();
      randomVariableLazyEvaluation0.isNaN();
      randomVariableLazyEvaluation0.getMin();
      randomVariableLazyEvaluation0.getTypePriority();
      randomVariableLazyEvaluation0.abs();
      double[] doubleArray0 = new double[0];
      randomVariableLazyEvaluation0.getHistogram(doubleArray0);
      randomVariableLazyEvaluation0.getHistogram(0, (double) 0);
      randomVariableLazyEvaluation0.div(randomVariable3);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(6.123233995736766E-17, (-587), (-1851.35983));
      Scalar scalar0 = new Scalar(6.123233995736766E-17);
      RandomVariable randomVariable0 = scalar0.sin();
      randomVariableLazyEvaluation0.accrue(randomVariable0, (-1768.432617247));
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.doubleValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The random variable is non-deterministic
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = (-989.87);
      int int0 = 8;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-989.87), 8, (-989.87));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 8;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-989.87);
      doubleArray1[1] = (-1451.12203468183);
      doubleArray1[2] = (double) 8;
      RationalFunctionInterpolation.InterpolationMethod rationalFunctionInterpolation_InterpolationMethod0 = RationalFunctionInterpolation.InterpolationMethod.AKIMA_CONTINUOUS;
      randomVariableLazyEvaluation0.cache();
      RationalFunctionInterpolation.ExtrapolationMethod rationalFunctionInterpolation_ExtrapolationMethod0 = RationalFunctionInterpolation.ExtrapolationMethod.LINEAR;
      RationalFunctionInterpolation rationalFunctionInterpolation0 = new RationalFunctionInterpolation(doubleArray0, doubleArray1, rationalFunctionInterpolation_InterpolationMethod0, rationalFunctionInterpolation_ExtrapolationMethod0);
      randomVariableLazyEvaluation0.apply((DoubleUnaryOperator) rationalFunctionInterpolation0);
      Scalar scalar0 = new Scalar(double0);
      RandomVariable randomVariable0 = scalar0.add((RandomVariable) randomVariableLazyEvaluation0);
      randomVariableLazyEvaluation0.getStandardError(randomVariable0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      PiecewiseContantDoubleUnaryOperator piecewiseContantDoubleUnaryOperator0 = null;
      try {
        piecewiseContantDoubleUnaryOperator0 = new PiecewiseContantDoubleUnaryOperator(linkedList0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length of values must equal length of intervalRightPoints + 1.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3920.3453654575;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(3920.3453654575, doubleArray0);
      randomVariableLazyEvaluation0.getStandardError();
      randomVariableLazyEvaluation0.getMin();
      randomVariableLazyEvaluation0.getStandardDeviation();
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.cache();
      DoubleTernaryOperator doubleTernaryOperator0 = mock(DoubleTernaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(doubleTernaryOperator0).applyAsDouble(anyDouble() , anyDouble() , anyDouble());
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.apply(doubleTernaryOperator0, randomVariable0, randomVariable0);
      DoubleTernaryOperator doubleTernaryOperator1 = mock(DoubleTernaryOperator.class, new ViolatedAssumptionAnswer());
      randomVariableLazyEvaluation0.apply(doubleTernaryOperator1, randomVariable1, randomVariable0);
      randomVariableLazyEvaluation0.accrue(randomVariable0, 0.0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.doubleValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The random variable is non-deterministic
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = (-2139.9768867355465);
      Scalar scalar0 = new Scalar((-2139.9768867355465));
      scalar0.getOperator();
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-2139.9768867355465), (IntToDoubleFunction) null, 752);
      randomVariableLazyEvaluation0.doubleValue();
      scalar0.vid((double) 0);
      randomVariableLazyEvaluation0.getHistogram(0, (double) 0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.addSumProduct((RandomVariable[]) null, (RandomVariable[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.stochastic.RandomVariable", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = 2.0;
      Scalar scalar0 = new Scalar(2.0);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(scalar0);
      RandomVariable randomVariable0 = scalar0.vid((RandomVariable) randomVariableLazyEvaluation0);
      RandomVariable randomVariable1 = scalar0.cap(randomVariable0);
      double[] doubleArray0 = new double[0];
      RationalFunctionInterpolation.InterpolationMethod rationalFunctionInterpolation_InterpolationMethod0 = RationalFunctionInterpolation.InterpolationMethod.PIECEWISE_CONSTANT_LEFTPOINT;
      RationalFunctionInterpolation.ExtrapolationMethod rationalFunctionInterpolation_ExtrapolationMethod0 = RationalFunctionInterpolation.ExtrapolationMethod.CONSTANT;
      RationalFunctionInterpolation rationalFunctionInterpolation0 = new RationalFunctionInterpolation(doubleArray0, doubleArray0, rationalFunctionInterpolation_InterpolationMethod0, rationalFunctionInterpolation_ExtrapolationMethod0);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation1 = null;
      try {
        randomVariableLazyEvaluation1 = new RandomVariableLazyEvaluation(randomVariable1, rationalFunctionInterpolation0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.interpolation.RationalFunctionInterpolation", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 249.60228436178645;
      doubleArray0[1] = 249.60228436178645;
      doubleArray0[2] = 249.60228436178645;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 249.60228436178645;
      doubleArray0[5] = 249.60228436178645;
      doubleArray0[6] = 249.60228436178645;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(249.60228436178645, doubleArray0);
      randomVariableLazyEvaluation0.getRealizationsStream();
      randomVariableLazyEvaluation0.exp();
      RandomVariableFromDoubleArray randomVariableFromDoubleArray0 = randomVariableLazyEvaluation0.getRandomVariable();
      RandomVariableLazyEvaluation randomVariableLazyEvaluation1 = new RandomVariableLazyEvaluation(randomVariableFromDoubleArray0);
      randomVariableLazyEvaluation1.getStandardError();
      randomVariableLazyEvaluation0.getVariance();
      randomVariableLazyEvaluation1.add(249.60228436178645);
      randomVariableLazyEvaluation1.getOperator();
      randomVariableLazyEvaluation0.size();
      randomVariableLazyEvaluation1.average();
      randomVariableLazyEvaluation1.mult(199.0);
      randomVariableLazyEvaluation0.getAverage();
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation1.doubleValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The random variable is non-deterministic
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-1203.4425), 2318, (-1203.4425));
      randomVariableLazyEvaluation0.cache();
      randomVariableLazyEvaluation0.exp();
      randomVariableLazyEvaluation0.getMax();
      randomVariableLazyEvaluation0.squared();
      randomVariableLazyEvaluation0.getStandardError();
      RandomVariable randomVariable0 = null;
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.getHistogram((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Scalar scalar0 = new Scalar(542.089826);
      scalar0.getOperator();
      int int0 = 0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 542.089826;
      doubleArray0[3] = 542.089826;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 542.089826;
      doubleArray0[8] = 542.089826;
      Scalar.arrayOf(doubleArray0);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(542.089826, (IntToDoubleFunction) null, 0);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.isNaN();
      randomVariableLazyEvaluation0.choose(scalar0, randomVariable0);
      randomVariableLazyEvaluation0.expectation();
      DoubleTernaryOperator doubleTernaryOperator0 = mock(DoubleTernaryOperator.class, new ViolatedAssumptionAnswer());
      scalar0.apply(doubleTernaryOperator0, randomVariable0, (RandomVariable) randomVariableLazyEvaluation0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.accrue((RandomVariable) null, 2.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-1.0));
      randomVariableLazyEvaluation0.invert();
      RandomVariable randomVariable0 = null;
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.floor((RandomVariable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Scalar scalar0 = new Scalar(82.0);
      RandomVariable randomVariable0 = scalar0.floor((-2743.143471));
      DoubleUnaryOperator doubleUnaryOperator0 = DoubleUnaryOperator.identity();
      RandomVariable randomVariable1 = scalar0.expectation();
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(randomVariable0, doubleUnaryOperator0);
      randomVariableLazyEvaluation0.getAverage(randomVariable0);
      randomVariableLazyEvaluation0.getMax();
      DoubleBinaryOperator doubleBinaryOperator0 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(doubleBinaryOperator0).applyAsDouble(anyDouble() , anyDouble());
      RandomVariable randomVariable2 = scalar0.add(82.0);
      randomVariableLazyEvaluation0.getStandardError();
      randomVariableLazyEvaluation0.apply(doubleBinaryOperator0, randomVariable1);
      RandomVariable randomVariable3 = randomVariableLazyEvaluation0.addProduct(randomVariable1, (-2743.143471));
      randomVariableLazyEvaluation0.accrue(randomVariable2, 4087.7686);
      randomVariableLazyEvaluation0.equals(randomVariable3);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = 0.0;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, 98, 98);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.log();
      randomVariableLazyEvaluation0.cache();
      randomVariableLazyEvaluation0.size();
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.vid(randomVariable0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = (-2013);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(2.0, (-2013), (-2013));
      RandomVariable randomVariable0 = null;
      Scalar scalar0 = new Scalar(568.79307250019);
      double double0 = Double.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.mult((RandomVariable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, 0, 0.0);
      randomVariableLazyEvaluation0.cos();
      randomVariableLazyEvaluation0.add((double) 0);
      randomVariableLazyEvaluation0.getStandardError();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 0;
      PiecewiseContantDoubleUnaryOperator piecewiseContantDoubleUnaryOperator0 = null;
      try {
        piecewiseContantDoubleUnaryOperator0 = new PiecewiseContantDoubleUnaryOperator(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length of values must equal length of intervalRightPoints + 1.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = (-3775);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, (-3775), (-383.46746417));
      double double0 = Double.NaN;
      DoubleBinaryOperator doubleBinaryOperator0 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      Scalar scalar0 = new Scalar((-1.0));
      RandomVariable randomVariable0 = scalar0.discount(randomVariableLazyEvaluation0, (-2801.3893));
      randomVariableLazyEvaluation0.apply(doubleBinaryOperator0, randomVariable0);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation1 = new RandomVariableLazyEvaluation(0.0, (-277), 0.0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation1.get((-3775));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3775
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(1.0, 1.0);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.pow(1.0);
      randomVariableLazyEvaluation0.sin();
      Scalar scalar0 = new Scalar(1.0);
      RandomVariable randomVariable1 = scalar0.addProduct(randomVariable0, 1.0);
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.discount(randomVariable1, 1.0);
      scalar0.exp();
      randomVariableLazyEvaluation0.exp();
      randomVariableLazyEvaluation0.getStandardDeviation(randomVariable2);
      RandomVariable randomVariable3 = randomVariableLazyEvaluation0.cap(randomVariable2);
      scalar0.sin();
      randomVariableLazyEvaluation0.addProduct(randomVariable0, 1.0);
      randomVariableLazyEvaluation0.getQuantile(1.0, (RandomVariable) scalar0);
      RandomVariable randomVariable4 = randomVariableLazyEvaluation0.div(randomVariable3);
      randomVariableLazyEvaluation0.getMin();
      randomVariableLazyEvaluation0.log();
      randomVariableLazyEvaluation0.equals(randomVariable1);
      randomVariableLazyEvaluation0.isDeterministic();
      randomVariableLazyEvaluation0.getQuantile(1.0, randomVariable4);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      RandomOperator randomOperator0 = RandomOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      randomOperator0.andThen((Function<? super RandomVariable, ?>) function0);
      Scalar scalar0 = new Scalar(199.0);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(199.0, 4488, 401.83357616155);
      scalar0.mult((RandomVariable) randomVariableLazyEvaluation0);
      // Undeclared exception!
      randomVariableLazyEvaluation0.getStandardError((RandomVariable) scalar0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Scalar scalar0 = new Scalar((-2099.3538038223332));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2099.3538038223332);
      RandomVariable randomVariable0 = scalar0.cache();
      scalar0.div(randomVariable0);
      RationalFunctionInterpolation.InterpolationMethod rationalFunctionInterpolation_InterpolationMethod0 = RationalFunctionInterpolation.InterpolationMethod.LINEAR;
      RationalFunctionInterpolation.ExtrapolationMethod rationalFunctionInterpolation_ExtrapolationMethod0 = RationalFunctionInterpolation.ExtrapolationMethod.LINEAR;
      RationalFunctionInterpolation rationalFunctionInterpolation0 = new RationalFunctionInterpolation(doubleArray0, doubleArray0, rationalFunctionInterpolation_InterpolationMethod0, rationalFunctionInterpolation_ExtrapolationMethod0);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(scalar0, rationalFunctionInterpolation0);
      randomVariableLazyEvaluation0.expand(3089);
      randomVariableLazyEvaluation0.getQuantileExpectation((-4313.632), 3089);
      randomVariableLazyEvaluation0.getStandardError(randomVariable0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = Double.NaN;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(Double.NaN, doubleArray0);
      Scalar scalar0 = new Scalar(Double.NaN);
      randomVariableLazyEvaluation0.cos();
      RandomVariable randomVariable0 = scalar0.cos();
      scalar0.cos();
      RandomVariable randomVariable1 = scalar0.vid((RandomVariable) randomVariableLazyEvaluation0);
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.cap(randomVariable0);
      scalar0.cos();
      randomVariableLazyEvaluation0.addRatio(randomVariable1, scalar0);
      randomVariableLazyEvaluation0.floor(0.0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.getQuantile(Double.NaN, randomVariable2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method not implemented.
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, 2321, 0.0);
      RandomVariable[] randomVariableArray0 = new RandomVariable[0];
      RandomVariableLazyEvaluation randomVariableLazyEvaluation1 = new RandomVariableLazyEvaluation(0.0, 2321, 2321);
      randomVariableLazyEvaluation0.floor((RandomVariable) randomVariableLazyEvaluation1);
      randomVariableLazyEvaluation0.addSumProduct(randomVariableArray0, randomVariableArray0);
      randomVariableLazyEvaluation0.expm1();
      randomVariableLazyEvaluation0.log();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1083.453);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, doubleArray0);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.exp();
      Scalar scalar0 = new Scalar(0.0);
      scalar0.equals(randomVariable0);
      scalar0.div(1772.1066023008);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation1 = new RandomVariableLazyEvaluation(0.0, (IntToDoubleFunction) null, 348);
      RandomVariable randomVariable1 = scalar0.add((RandomVariable) randomVariableLazyEvaluation1);
      randomVariableLazyEvaluation0.discount(randomVariable1, 0.0);
      randomVariableLazyEvaluation1.getMin();
      randomVariableLazyEvaluation0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(1949.654);
      Scalar scalar0 = new Scalar(1949.654);
      scalar0.accrue(randomVariableLazyEvaluation0, 1949.654);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.add(1949.654);
      DoubleTernaryOperator doubleTernaryOperator0 = mock(DoubleTernaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(doubleTernaryOperator0).applyAsDouble(anyDouble() , anyDouble() , anyDouble());
      randomVariableLazyEvaluation0.apply(doubleTernaryOperator0, randomVariable0, (RandomVariable) scalar0);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation1 = new RandomVariableLazyEvaluation((-1869.337));
      RandomVariable randomVariable1 = scalar0.addProduct((RandomVariable) randomVariableLazyEvaluation0, (RandomVariable) randomVariableLazyEvaluation1);
      randomVariableLazyEvaluation0.getAverage(randomVariable1);
      randomVariableLazyEvaluation0.cap(1949.654);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation1.getHistogram((-859), (double) (-859));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, 0, 1.7976931348623157E308);
      DoubleBinaryOperator doubleBinaryOperator0 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      Scalar scalar0 = new Scalar(0.0);
      RandomVariable randomVariable0 = scalar0.discount(randomVariableLazyEvaluation0, 199.0);
      randomVariableLazyEvaluation0.apply(doubleBinaryOperator0, doubleBinaryOperator0, randomVariable0, (RandomVariable) scalar0);
      randomVariableLazyEvaluation0.average();
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.cache();
      randomVariableLazyEvaluation0.getRealizations();
      randomVariableLazyEvaluation0.vid(randomVariable1);
      randomVariableLazyEvaluation0.squared();
      randomVariableLazyEvaluation0.expectation();
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.vid((RandomVariable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-3590.04308088645), (IntToDoubleFunction) null, (-1830));
      randomVariableLazyEvaluation0.getVariance();
      randomVariableLazyEvaluation0.squared();
      randomVariableLazyEvaluation0.getHistogram(0, 0.0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(Double.NaN, 3474, 0.0);
      Scalar scalar0 = new Scalar(0.0);
      RandomVariable randomVariable0 = scalar0.isNaN();
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.discount(randomVariable0, 0.0);
      Scalar scalar1 = new Scalar(Double.NEGATIVE_INFINITY);
      scalar1.getOperator();
      RandomVariableLazyEvaluation randomVariableLazyEvaluation1 = new RandomVariableLazyEvaluation(0.0, (IntToDoubleFunction) null, 0);
      randomVariableLazyEvaluation0.equals((RandomVariable) randomVariableLazyEvaluation1);
      RandomVariable randomVariable2 = scalar1.expm1();
      randomVariableLazyEvaluation0.sin();
      randomVariableLazyEvaluation1.isDeterministic();
      randomVariableLazyEvaluation1.getQuantileExpectation(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      randomVariableLazyEvaluation1.floor(0.0);
      DoubleBinaryOperator doubleBinaryOperator0 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      randomVariableLazyEvaluation0.apply(doubleBinaryOperator0, doubleBinaryOperator0, (RandomVariable) scalar1, randomVariable1);
      randomVariableLazyEvaluation1.getStandardDeviation();
      randomVariableLazyEvaluation0.size();
      randomVariableLazyEvaluation1.getRandomVariable();
      randomVariableLazyEvaluation1.abs();
      randomVariableLazyEvaluation1.getQuantile(0.0);
      DoubleTernaryOperator doubleTernaryOperator0 = mock(DoubleTernaryOperator.class, new ViolatedAssumptionAnswer());
      randomVariableLazyEvaluation0.apply(doubleTernaryOperator0, randomVariable0, randomVariable2);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(Double.NaN, doubleArray0);
      randomVariableLazyEvaluation0.add(Double.NaN);
      Scalar scalar0 = new Scalar(Double.NaN);
      randomVariableLazyEvaluation0.getStandardError();
      RandomVariable randomVariable0 = scalar0.addProduct((RandomVariable) randomVariableLazyEvaluation0, (RandomVariable) randomVariableLazyEvaluation0);
      randomVariableLazyEvaluation0.addRatio(randomVariable0, randomVariable0);
      randomVariableLazyEvaluation0.getMin();
      LinkedList<RandomVariable> linkedList0 = new LinkedList<RandomVariable>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.removeAll(linkedList1);
      scalar0.addSumProduct((List<RandomVariable>) linkedList0, (List<RandomVariable>) linkedList0);
      randomVariableLazyEvaluation0.div(Double.NaN);
      RandomVariable randomVariable1 = scalar0.exp();
      randomVariableLazyEvaluation0.addProduct(randomVariable1, Double.NaN);
      randomVariableLazyEvaluation0.add((RandomVariable) scalar0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.get(1952);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = (-114.9751206);
      int int0 = 0;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-114.9751206), 0, (-114.9751206));
      randomVariableLazyEvaluation0.getQuantile((double) 0);
      randomVariableLazyEvaluation0.getQuantileExpectation((-114.9751206), (-114.9751206));
      double double1 = 799.0510434;
      Scalar scalar0 = new Scalar(799.0510434);
      scalar0.add(Double.NaN);
      scalar0.addProduct((RandomVariable) randomVariableLazyEvaluation0, Double.NaN);
      // Undeclared exception!
      try { 
        scalar0.getHistogram((-1), (double) (-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.stochastic.Scalar", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(935.75, 935.75);
      Scalar scalar0 = new Scalar(2155.684394);
      RandomVariable randomVariable0 = scalar0.sqrt();
      randomVariableLazyEvaluation0.getQuantile(935.75, randomVariable0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(2605.054526, (-2289), 99.203139);
      randomVariableLazyEvaluation0.getSampleVariance();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-2926.10496));
      DoubleBinaryOperator doubleBinaryOperator0 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(doubleBinaryOperator0).applyAsDouble(anyDouble() , anyDouble());
      Scalar scalar0 = new Scalar((-2926.10496));
      RandomVariable randomVariable0 = scalar0.floor((-2926.10496));
      randomVariableLazyEvaluation0.getAverage(randomVariable0);
      RandomVariable randomVariable1 = scalar0.sub((RandomVariable) randomVariableLazyEvaluation0);
      RandomVariable randomVariable2 = scalar0.log();
      randomVariableLazyEvaluation0.apply(doubleBinaryOperator0, randomVariable2);
      RandomVariable randomVariable3 = randomVariableLazyEvaluation0.invert();
      RandomVariable[] randomVariableArray0 = new RandomVariable[4];
      randomVariableArray0[0] = (RandomVariable) randomVariableLazyEvaluation0;
      randomVariableArray0[1] = randomVariable0;
      randomVariableArray0[2] = randomVariable3;
      randomVariableArray0[3] = randomVariable1;
      RandomVariableArray randomVariableArray1 = RandomVariableArrayImplementation.of(randomVariableArray0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.subRatio(randomVariable0, randomVariableArray1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.stochastic.RandomVariableArrayImplementation", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 209.78203994794;
      doubleArray0[1] = 209.78203994794;
      doubleArray0[2] = 209.78203994794;
      doubleArray0[3] = 334.0;
      doubleArray0[4] = 209.78203994794;
      doubleArray0[5] = 209.78203994794;
      doubleArray0[6] = 209.78203994794;
      doubleArray0[7] = 209.78203994794;
      doubleArray0[8] = 209.78203994794;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(209.78203994794, doubleArray0);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.cap(334.0);
      randomVariableLazyEvaluation0.getAverage();
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.expand(0);
      randomVariableLazyEvaluation0.choose(randomVariable1, randomVariable0);
      randomVariableLazyEvaluation0.sub(0.0);
      randomVariableLazyEvaluation0.getHistogram(doubleArray0);
      randomVariableLazyEvaluation0.getRandomVariable();
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.get(286);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(3513.7);
      randomVariableLazyEvaluation0.getAverage();
      Scalar scalar0 = new Scalar(3513.7);
      RandomVariable randomVariable0 = scalar0.invert();
      randomVariableLazyEvaluation0.getAverage(randomVariable0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-1.0), (-1.0));
      Scalar scalar0 = new Scalar((-1.0));
      DoubleBinaryOperator doubleBinaryOperator0 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      RandomVariable randomVariable0 = scalar0.isNaN();
      scalar0.apply(doubleBinaryOperator0, randomVariable0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.addRatio((RandomVariable) null, (RandomVariable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(5.0, 5.0);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.sin();
      DoubleTernaryOperator doubleTernaryOperator0 = mock(DoubleTernaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(doubleTernaryOperator0).applyAsDouble(anyDouble() , anyDouble() , anyDouble());
      randomVariableLazyEvaluation0.apply(doubleTernaryOperator0, randomVariable0, randomVariable0);
      randomVariableLazyEvaluation0.getVariance();
      randomVariableLazyEvaluation0.getQuantile(5.0);
      randomVariableLazyEvaluation0.add(randomVariable0);
      randomVariableLazyEvaluation0.getVariance(randomVariable0);
      Scalar scalar0 = new Scalar(6.0);
      DoubleTernaryOperator doubleTernaryOperator1 = mock(DoubleTernaryOperator.class, new ViolatedAssumptionAnswer());
      scalar0.discount(randomVariableLazyEvaluation0, 0.0);
      scalar0.apply(doubleTernaryOperator1, randomVariable0, randomVariable0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.getAverage((RandomVariable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-2225.06));
      Scalar scalar0 = new Scalar((-2225.06));
      RandomVariable randomVariable0 = scalar0.add((RandomVariable) randomVariableLazyEvaluation0);
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.addProduct(randomVariable0, (RandomVariable) scalar0);
      randomVariableLazyEvaluation0.expectation();
      DoubleBinaryOperator doubleBinaryOperator0 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(doubleBinaryOperator0).applyAsDouble(anyDouble() , anyDouble());
      randomVariableLazyEvaluation0.apply(doubleBinaryOperator0, randomVariable0);
      RandomVariable randomVariable2 = scalar0.invert();
      scalar0.vid(randomVariable2);
      randomVariableLazyEvaluation0.getOperator();
      randomVariableLazyEvaluation0.sin();
      randomVariableLazyEvaluation0.getQuantile(0.0);
      randomVariableLazyEvaluation0.equals((RandomVariable) scalar0);
      randomVariableLazyEvaluation0.getStandardDeviation(randomVariable1);
      randomVariableLazyEvaluation0.div((-2225.06));
      randomVariableLazyEvaluation0.mult((RandomVariable) scalar0);
      randomVariableLazyEvaluation0.cap((-1.0));
      randomVariableLazyEvaluation0.average();
      randomVariableLazyEvaluation0.getMin();
      randomVariableLazyEvaluation0.subRatio(scalar0, randomVariable1);
      randomVariableLazyEvaluation0.getQuantile(243.0);
      randomVariableLazyEvaluation0.getStandardError();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = (-1519.528007569);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-1519.528007569), (-1519.528007569));
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.addProduct((RandomVariable) null, (RandomVariable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = 0.5;
      int int0 = 0;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.5, 0, 0);
      DoubleTernaryOperator doubleTernaryOperator0 = mock(DoubleTernaryOperator.class, new ViolatedAssumptionAnswer());
      Scalar scalar0 = new Scalar(0.0);
      scalar0.sqrt();
      RandomVariable randomVariable0 = scalar0.discount(randomVariableLazyEvaluation0, 0.5);
      randomVariableLazyEvaluation0.apply(doubleTernaryOperator0, randomVariable0, (RandomVariable) scalar0);
      randomVariableLazyEvaluation0.exp();
      // Undeclared exception!
      try { 
        scalar0.getHistogram(74, 455.699589923989);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.stochastic.Scalar", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Scalar scalar0 = new Scalar((-889.715365427994));
      RandomVariable randomVariable0 = scalar0.sin();
      RandomVariable randomVariable1 = scalar0.mult(randomVariable0);
      RandomVariable[] randomVariableArray0 = new RandomVariable[6];
      randomVariableArray0[0] = randomVariable0;
      randomVariableArray0[1] = (RandomVariable) scalar0;
      randomVariableArray0[2] = randomVariable1;
      randomVariableArray0[3] = (RandomVariable) scalar0;
      randomVariableArray0[4] = randomVariable0;
      randomVariableArray0[5] = randomVariable1;
      scalar0.addSumProduct(randomVariableArray0, randomVariableArray0);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(randomVariable1);
      scalar0.sub((-889.715365427994));
      scalar0.addProduct(randomVariable1, 0.0);
      randomVariableLazyEvaluation0.getQuantile(7.0);
      randomVariableLazyEvaluation0.isNaN();
      randomVariableLazyEvaluation0.get((-409));
      randomVariableLazyEvaluation0.getQuantileExpectation(0.0, (-534.6426773452447));
      randomVariableLazyEvaluation0.abs();
      randomVariableLazyEvaluation0.getMax();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-534.6426773452447);
      doubleArray0[1] = (-534.6426773452447);
      doubleArray0[2] = (-534.6426773452447);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-409);
      doubleArray0[5] = (-889.715365427994);
      randomVariableLazyEvaluation0.getHistogram(doubleArray0);
      randomVariableLazyEvaluation0.add((RandomVariable) scalar0);
      randomVariableLazyEvaluation0.doubleValue();
      randomVariableLazyEvaluation0.sub(28.55176);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 1123.878549399933;
      doubleArray0[0] = 1123.878549399933;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, doubleArray0);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.cos();
      RationalFunctionInterpolation rationalFunctionInterpolation0 = new RationalFunctionInterpolation(doubleArray0, doubleArray0);
      DoubleUnaryOperator doubleUnaryOperator0 = DoubleUnaryOperator.identity();
      rationalFunctionInterpolation0.andThen(doubleUnaryOperator0);
      randomVariableLazyEvaluation0.apply((DoubleUnaryOperator) rationalFunctionInterpolation0);
      RandomVariableFromDoubleArray randomVariableFromDoubleArray0 = randomVariableLazyEvaluation0.getRandomVariable();
      randomVariableLazyEvaluation0.bus(randomVariable0);
      randomVariableLazyEvaluation0.getStandardDeviation();
      randomVariableLazyEvaluation0.getMax();
      randomVariableLazyEvaluation0.size();
      randomVariableLazyEvaluation0.choose(randomVariableFromDoubleArray0, randomVariable0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.get(3326);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-551.4092317348849), 0.0);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.add((-551.4092317348849));
      Scalar scalar0 = new Scalar(0.01);
      RandomVariable randomVariable1 = scalar0.addRatio(randomVariableLazyEvaluation0, randomVariableLazyEvaluation0);
      randomVariableLazyEvaluation0.subRatio(randomVariable1, randomVariable0);
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.bus(randomVariable1);
      randomVariableLazyEvaluation0.getVariance();
      randomVariableLazyEvaluation0.sin();
      randomVariableLazyEvaluation0.isNaN();
      scalar0.invert();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-551.4092317348849);
      doubleArray0[3] = (-551.4092317348849);
      randomVariableLazyEvaluation0.getHistogram(doubleArray0);
      scalar0.sub(0.01);
      Scalar scalar1 = new Scalar((-2729.367557));
      scalar1.abs();
      RandomVariable randomVariable3 = scalar1.isNaN();
      randomVariableLazyEvaluation0.getQuantile(2689.136875033, randomVariable3);
      randomVariableLazyEvaluation0.getVariance(randomVariable2);
      randomVariableLazyEvaluation0.div(0.0);
      randomVariableLazyEvaluation0.add(0.0);
      randomVariableLazyEvaluation0.sub((-551.4092317348849));
      randomVariableLazyEvaluation0.getRandomVariable();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.01, (-1027), (-1027));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.01;
      randomVariableLazyEvaluation0.floor(273.1);
      doubleArray0[1] = (double) (-1027);
      doubleArray0[2] = (-111.5859279);
      doubleArray0[3] = (double) (-1027);
      doubleArray0[4] = 0.01;
      doubleArray0[5] = 0.01;
      doubleArray0[6] = (double) (-1027);
      doubleArray0[7] = 0.01;
      doubleArray0[8] = 0.01;
      randomVariableLazyEvaluation0.getHistogram(doubleArray0);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.cos();
      randomVariableLazyEvaluation0.getStandardError(randomVariable0);
      randomVariableLazyEvaluation0.getStandardDeviation(randomVariable0);
      randomVariableLazyEvaluation0.getTypePriority();
      DoubleTernaryOperator doubleTernaryOperator0 = mock(DoubleTernaryOperator.class, new ViolatedAssumptionAnswer());
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.apply(doubleTernaryOperator0, randomVariable0, randomVariable0);
      randomVariableLazyEvaluation0.cos();
      DoubleTernaryOperator doubleTernaryOperator1 = mock(DoubleTernaryOperator.class, new ViolatedAssumptionAnswer());
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.apply(doubleTernaryOperator1, randomVariable1, randomVariable0);
      randomVariableLazyEvaluation0.expand(0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.getQuantile(1431.98, randomVariable2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method not implemented.
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, (-5808), 0.0);
      Scalar scalar0 = new Scalar(615.8753846);
      RandomVariable randomVariable0 = scalar0.vid((RandomVariable) randomVariableLazyEvaluation0);
      scalar0.pow((-5808));
      scalar0.variance();
      scalar0.getAverage((RandomVariable) randomVariableLazyEvaluation0);
      RandomVariable randomVariable1 = scalar0.bus((RandomVariable) randomVariableLazyEvaluation0);
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.addProduct(randomVariable1, randomVariable1);
      randomVariableLazyEvaluation0.div((RandomVariable) scalar0);
      scalar0.accrue(randomVariable0, 0.0);
      randomVariableLazyEvaluation0.sub((-2427.918));
      randomVariableLazyEvaluation0.size();
      randomVariableLazyEvaluation0.getStandardDeviation(randomVariable2);
      RandomVariable randomVariable3 = randomVariableLazyEvaluation0.sqrt();
      randomVariableLazyEvaluation0.choose(randomVariable2, randomVariable3);
      randomVariableLazyEvaluation0.squared();
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.isNaN();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(666.3319, (-763), 0.0);
      Scalar scalar0 = new Scalar(1935.9987437);
      RandomVariable randomVariable0 = scalar0.cos();
      randomVariableLazyEvaluation0.addProduct(randomVariable0, 0.0);
      randomVariableLazyEvaluation0.getHistogram(2599, 0.0);
      randomVariableLazyEvaluation0.getTypePriority();
      randomVariableLazyEvaluation0.getStandardError();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1267.501422);
      doubleArray0[1] = (-1267.501422);
      doubleArray0[2] = (-1267.501422);
      doubleArray0[3] = (-1267.501422);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-1267.501422), doubleArray0);
      randomVariableLazyEvaluation0.sin();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(1.7976931348623157E308);
      Scalar scalar0 = new Scalar(101.27);
      RandomVariable randomVariable0 = scalar0.mult(101.27);
      randomVariableLazyEvaluation0.subRatio(randomVariable0, randomVariable0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, 0, 0.0);
      double double0 = 1166.42815977;
      Scalar scalar0 = new Scalar(1166.42815977);
      scalar0.mult((double) 0);
      randomVariableLazyEvaluation0.squared();
      // Undeclared exception!
      try { 
        scalar0.cap((RandomVariable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.stochastic.Scalar", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-823.406407);
      doubleArray0[1] = (-823.406407);
      doubleArray0[2] = (-823.406407);
      doubleArray0[3] = (-823.406407);
      doubleArray0[4] = (-823.406407);
      doubleArray0[5] = (-823.406407);
      doubleArray0[6] = (-823.406407);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-823.406407), doubleArray0);
      randomVariableLazyEvaluation0.getQuantile((-823.406407));
      randomVariableLazyEvaluation0.getVariance();
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.bus((RandomVariable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Scalar scalar0 = new Scalar(1248.2102551232674);
      scalar0.getOperator();
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(1248.2102551232674, (IntToDoubleFunction) null, 1579);
      randomVariableLazyEvaluation0.getAverage();
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.subRatio(scalar0, scalar0);
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.mult(Double.NaN);
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.addProduct((RandomVariable) scalar0, randomVariable1);
      randomVariableLazyEvaluation0.expand(1579);
      randomVariableLazyEvaluation0.floor(Double.NaN);
      DoubleBinaryOperator doubleBinaryOperator0 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(doubleBinaryOperator0).applyAsDouble(anyDouble() , anyDouble());
      randomVariableLazyEvaluation0.apply(doubleBinaryOperator0, doubleBinaryOperator0, randomVariable0, (RandomVariable) scalar0);
      DoubleBinaryOperator doubleBinaryOperator1 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(doubleBinaryOperator1).applyAsDouble(anyDouble() , anyDouble());
      randomVariableLazyEvaluation0.apply(doubleBinaryOperator1, (RandomVariable) scalar0);
      randomVariableLazyEvaluation0.getStandardError(randomVariable2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-3969.33089705947), 1, 0.0);
      Scalar scalar0 = new Scalar((-1993.8743460804183));
      RandomVariable randomVariable0 = scalar0.abs();
      RandomVariable randomVariable1 = scalar0.isNaN();
      randomVariableLazyEvaluation0.addRatio(randomVariable0, randomVariable1);
      randomVariableLazyEvaluation0.getStandardError();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1993.8743460804183);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1993.8743460804183);
      doubleArray0[3] = (-1993.8743460804183);
      randomVariableLazyEvaluation0.getHistogram(doubleArray0);
      randomVariableLazyEvaluation0.discount(randomVariable1, (-2843.095245001));
      randomVariableLazyEvaluation0.getHistogram(1, (-1993.8743460804183));
      randomVariableLazyEvaluation0.cache();
      randomVariableLazyEvaluation0.getHistogram(doubleArray0);
      randomVariableLazyEvaluation0.log();
      randomVariableLazyEvaluation0.add(randomVariable0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Scalar scalar0 = new Scalar(1526.973459934073);
      scalar0.getOperator();
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(467.995170506575, (IntToDoubleFunction) null, 728);
      scalar0.div((RandomVariable) randomVariableLazyEvaluation0);
      randomVariableLazyEvaluation0.getRandomVariable();
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.subRatio(scalar0, scalar0);
      randomVariableLazyEvaluation0.abs();
      RandomVariable randomVariable1 = scalar0.cap(randomVariable0);
      randomVariableLazyEvaluation0.cap((double) 728);
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.floor(1526.973459934073);
      randomVariableLazyEvaluation0.subRatio(randomVariable0, randomVariable2);
      randomVariableLazyEvaluation0.getRandomVariable();
      randomVariableLazyEvaluation0.cap(3277.41881483);
      randomVariableLazyEvaluation0.getQuantile((double) 728);
      randomVariableLazyEvaluation0.getStandardDeviation(randomVariable1);
      randomVariableLazyEvaluation0.getAverage();
      RandomVariable randomVariable3 = randomVariableLazyEvaluation0.isNaN();
      randomVariableLazyEvaluation0.abs();
      randomVariableLazyEvaluation0.getOperator();
      randomVariableLazyEvaluation0.getSampleVariance();
      randomVariableLazyEvaluation0.addProduct(randomVariable3, Double.NaN);
      randomVariableLazyEvaluation0.getStandardDeviation();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      PiecewiseContantDoubleUnaryOperator piecewiseContantDoubleUnaryOperator0 = null;
      try {
        piecewiseContantDoubleUnaryOperator0 = new PiecewiseContantDoubleUnaryOperator(linkedList0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length of values must equal length of intervalRightPoints + 1.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1579.21448012862);
      doubleArray0[1] = (-1579.21448012862);
      doubleArray0[2] = (-1579.21448012862);
      doubleArray0[3] = (-1579.21448012862);
      doubleArray0[4] = (-1579.21448012862);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-1579.21448012862), doubleArray0);
      randomVariableLazyEvaluation0.vid((-320.09585));
      Scalar scalar0 = new Scalar((-264.043693058));
      RandomVariable randomVariable0 = scalar0.bus((RandomVariable) randomVariableLazyEvaluation0);
      randomVariableLazyEvaluation0.vid(randomVariable0);
      randomVariableLazyEvaluation0.getHistogram(275, 868.75554);
      randomVariableLazyEvaluation0.bus(randomVariable0);
      randomVariableLazyEvaluation0.cache();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Scalar scalar0 = new Scalar(0.0);
      RandomVariable randomVariable0 = scalar0.div(0.0);
      RandomVariable randomVariable1 = scalar0.cos();
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(randomVariable0);
      randomVariableLazyEvaluation0.discount(scalar0, 0.0);
      RandomVariable randomVariable2 = scalar0.addRatio(randomVariable0, randomVariableLazyEvaluation0);
      randomVariableLazyEvaluation0.vid(randomVariable2);
      randomVariableLazyEvaluation0.getOperator();
      RandomVariable randomVariable3 = randomVariableLazyEvaluation0.floor(0.0);
      randomVariableLazyEvaluation0.subRatio(randomVariable1, randomVariable3);
      randomVariableLazyEvaluation0.div(0.0);
      randomVariableLazyEvaluation0.log();
      randomVariableLazyEvaluation0.getRandomVariable();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(2.0, 204, 204);
      DoubleBinaryOperator doubleBinaryOperator0 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      Scalar scalar0 = new Scalar(199.0);
      RandomVariable randomVariable0 = scalar0.add(904.9);
      randomVariableLazyEvaluation0.apply(doubleBinaryOperator0, randomVariable0);
      randomVariableLazyEvaluation0.squared();
      randomVariableLazyEvaluation0.getRandomVariable();
      randomVariableLazyEvaluation0.sqrt();
      randomVariableLazyEvaluation0.invert();
      randomVariableLazyEvaluation0.sin();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = 1821.9596;
      Scalar scalar0 = new Scalar(1821.9596);
      RandomVariable randomVariable0 = scalar0.sqrt();
      RationalFunctionInterpolation rationalFunctionInterpolation0 = new RationalFunctionInterpolation((double[]) null, (double[]) null);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = null;
      try {
        randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(randomVariable0, rationalFunctionInterpolation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.interpolation.RationalFunctionInterpolation", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(2.0);
      Scalar scalar0 = new Scalar((-2518.6727));
      RandomVariable randomVariable0 = scalar0.expectation();
      RandomVariable randomVariable1 = scalar0.cos();
      scalar0.exp();
      RandomVariable randomVariable2 = scalar0.squared();
      RandomVariable randomVariable3 = scalar0.mult((RandomVariable) randomVariableLazyEvaluation0);
      randomVariableLazyEvaluation0.add(randomVariable3);
      RandomVariable randomVariable4 = randomVariableLazyEvaluation0.squared();
      randomVariableLazyEvaluation0.getStandardError();
      RandomVariable randomVariable5 = scalar0.cap(0.0);
      randomVariableLazyEvaluation0.getStandardError();
      RandomVariableFromDoubleArray randomVariableFromDoubleArray0 = randomVariableLazyEvaluation0.getRandomVariable();
      RandomVariable randomVariable6 = randomVariableLazyEvaluation0.bus(randomVariable4);
      scalar0.variance();
      randomVariableLazyEvaluation0.getSampleVariance();
      randomVariableLazyEvaluation0.getStandardError();
      RandomVariable randomVariable7 = randomVariableLazyEvaluation0.sub(randomVariable0);
      randomVariableLazyEvaluation0.getMax();
      randomVariableLazyEvaluation0.addProduct((RandomVariable) randomVariableFromDoubleArray0, randomVariable2);
      randomVariableLazyEvaluation0.getVariance();
      RandomVariable randomVariable8 = randomVariableLazyEvaluation0.addProduct(randomVariable7, randomVariable6);
      randomVariableLazyEvaluation0.choose(randomVariable8, randomVariable1);
      randomVariableLazyEvaluation0.div(0.0);
      randomVariableLazyEvaluation0.getRealizationsStream();
      randomVariableLazyEvaluation0.getVariance();
      randomVariableLazyEvaluation0.getQuantileExpectation(29.4312768688317, (-4050.2975955878));
      randomVariableLazyEvaluation0.choose(randomVariable6, randomVariable5);
      randomVariableLazyEvaluation0.doubleValue();
      randomVariableLazyEvaluation0.floor(0.0);
      randomVariableLazyEvaluation0.vid(randomVariable8);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(4555.8024);
      randomVariableLazyEvaluation0.expand(1232);
      randomVariableLazyEvaluation0.getQuantile(0.0);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.cap((-18.1401047));
      randomVariableLazyEvaluation0.div(randomVariable0);
      randomVariableLazyEvaluation0.isNaN();
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.isNaN();
      RandomVariableLazyEvaluation randomVariableLazyEvaluation1 = new RandomVariableLazyEvaluation(4555.8024, (-3824.73896));
      randomVariableLazyEvaluation1.getQuantile(4555.8024);
      randomVariableLazyEvaluation0.discount(randomVariableLazyEvaluation1, 4555.8024);
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.addProduct(randomVariable0, 0.0);
      RandomVariable randomVariable3 = randomVariableLazyEvaluation0.choose(randomVariable2, randomVariable1);
      randomVariableLazyEvaluation1.cap(randomVariable3);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = 2.0;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(2.0, (-2704), Double.POSITIVE_INFINITY);
      randomVariableLazyEvaluation0.average();
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.isNaN();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = (-935.604304455);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-935.604304455));
      randomVariableLazyEvaluation0.invert();
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.abs();
      int int0 = (-2158);
      randomVariableLazyEvaluation0.cap(randomVariable0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.expand((-2158));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(1064.05614855643, 7, 7);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.sin();
      randomVariableLazyEvaluation0.getOperator();
      randomVariableLazyEvaluation0.getStandardError();
      double double0 = 3472.3477412;
      double double1 = 0.0;
      randomVariableLazyEvaluation0.addProduct(randomVariable0, randomVariable0);
      randomVariableLazyEvaluation0.getQuantileExpectation(double0, double1);
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.invert();
      randomVariableLazyEvaluation0.getAverage(randomVariable0);
      randomVariableLazyEvaluation0.addRatio(randomVariable0, randomVariable0);
      randomVariableLazyEvaluation0.getStandardError(randomVariable0);
      double double2 = randomVariableLazyEvaluation0.getVariance(randomVariable1);
      randomVariableLazyEvaluation0.getAverage(randomVariable1);
      double double3 = randomVariableLazyEvaluation0.getFiltrationTime();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = double3;
      double double4 = 0.0;
      doubleArray0[1] = double4;
      double double5 = 1.0;
      doubleArray0[2] = double5;
      doubleArray0[3] = double2;
      doubleArray0[4] = double1;
      randomVariableLazyEvaluation0.getHistogram(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(513.0, 0, 2811.309);
      randomVariableLazyEvaluation0.getStandardError((RandomVariable) null);
      randomVariableLazyEvaluation0.sin();
      randomVariableLazyEvaluation0.mult(0.0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-1596.8440646017), (-1724), (-1724));
      randomVariableLazyEvaluation0.getStandardError();
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.cache();
      randomVariable0.getStandardDeviation();
      randomVariableLazyEvaluation0.div(437.98768494);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = (-308.24);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-308.24);
      doubleArray0[1] = (-308.24);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-308.24);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-308.24), doubleArray0);
      Scalar scalar0 = new Scalar(2.0);
      scalar0.vid(0.0);
      RandomVariable randomVariable0 = scalar0.abs();
      randomVariableLazyEvaluation0.sub(randomVariable0);
      RandomVariable randomVariable1 = scalar0.sin();
      randomVariableLazyEvaluation0.bus(randomVariable1);
      scalar0.vid((RandomVariable) randomVariableLazyEvaluation0);
      DoubleBinaryOperator doubleBinaryOperator0 = null;
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.doubleValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The random variable is non-deterministic
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-1.0), doubleArray0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.getHistogram((-1163), (-1.0));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      RandomVariable[] randomVariableArray0 = new RandomVariable[2];
      Scalar scalar0 = new Scalar(179.58208375067);
      RandomVariable randomVariable0 = scalar0.sub(179.58208375067);
      randomVariableArray0[0] = randomVariable0;
      Scalar scalar1 = new Scalar(179.58208375067);
      RandomVariable randomVariable1 = scalar1.vid((RandomVariable) scalar0);
      randomVariableArray0[1] = randomVariable1;
      RandomVariableArray randomVariableArray1 = RandomVariableArrayImplementation.of(randomVariableArray0);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = null;
      try {
        randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(randomVariableArray1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.stochastic.RandomVariableArrayImplementation", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(1.0);
      Scalar scalar0 = new Scalar((-1370.0933809779083));
      randomVariableLazyEvaluation0.getAverage((RandomVariable) scalar0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1210.26523;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(1210.26523, doubleArray0);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.expand(0);
      randomVariableLazyEvaluation0.abs();
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.cos();
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.addProduct(randomVariable1, randomVariable1);
      RandomVariable randomVariable3 = randomVariableLazyEvaluation0.mult(randomVariable2);
      Scalar scalar0 = new Scalar(0.0);
      RandomOperator randomOperator0 = RandomOperator.identity();
      RandomVariable randomVariable4 = randomOperator0.apply(randomVariable0);
      RandomVariable randomVariable5 = scalar0.cap(randomVariable4);
      randomVariableLazyEvaluation0.addRatio(randomVariable5, randomVariable3);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Scalar scalar0 = new Scalar(2.0);
      scalar0.getOperator();
      int int0 = 1246;
      scalar0.cap(2.0);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(2.0, (IntToDoubleFunction) null, 1246);
      randomVariableLazyEvaluation0.exp();
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.cap((RandomVariable) scalar0);
      randomVariableLazyEvaluation0.sqrt();
      randomVariableLazyEvaluation0.cos();
      randomVariableLazyEvaluation0.add(randomVariable0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.div((RandomVariable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = 0.0;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, 0.0);
      Scalar scalar0 = new Scalar(0.0);
      DoubleTernaryOperator doubleTernaryOperator0 = mock(DoubleTernaryOperator.class, new ViolatedAssumptionAnswer());
      scalar0.apply(doubleTernaryOperator0, (RandomVariable) randomVariableLazyEvaluation0, (RandomVariable) randomVariableLazyEvaluation0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.choose((RandomVariable) null, scalar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, 1.7976931348623157E308);
      randomVariableLazyEvaluation0.getMax();
      Scalar scalar0 = new Scalar(0.0);
      scalar0.cap(0.0);
      RandomVariable randomVariable0 = scalar0.abs();
      randomVariableLazyEvaluation0.addRatio(randomVariable0, scalar0);
      scalar0.mult(randomVariable0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.apply((DoubleUnaryOperator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = 1831.0;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(1831.0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.sub((RandomVariable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2732.0);
      doubleArray0[1] = (-2732.0);
      doubleArray0[2] = (-2732.0);
      doubleArray0[3] = (-2732.0);
      doubleArray0[4] = (-2732.0);
      doubleArray0[5] = (-2732.0);
      doubleArray0[6] = (-2732.0);
      doubleArray0[7] = (-2732.0);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-2732.0), doubleArray0);
      DoubleBinaryOperator doubleBinaryOperator0 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(doubleBinaryOperator0).applyAsDouble(anyDouble() , anyDouble());
      Scalar scalar0 = new Scalar((-2732.0));
      RandomVariable randomVariable0 = scalar0.mult((-2732.0));
      RandomVariable randomVariable1 = scalar0.add((RandomVariable) randomVariableLazyEvaluation0);
      randomVariableLazyEvaluation0.sub((-2732.0));
      randomVariableLazyEvaluation0.addProduct(randomVariable0, randomVariable1);
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.apply(doubleBinaryOperator0, doubleBinaryOperator0, randomVariable0, randomVariable0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.bus(randomVariable2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(4.0, 0, 0);
      randomVariableLazyEvaluation0.getTypePriority();
      DoubleBinaryOperator doubleBinaryOperator0 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      RandomVariableLazyEvaluation randomVariableLazyEvaluation1 = new RandomVariableLazyEvaluation(1978.7928438506758, 1978.7928438506758);
      randomVariableLazyEvaluation0.choose(randomVariableLazyEvaluation1, randomVariableLazyEvaluation1);
      Scalar scalar0 = new Scalar(4.0);
      RandomVariable randomVariable0 = scalar0.mult((RandomVariable) randomVariableLazyEvaluation0);
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.apply(doubleBinaryOperator0, randomVariable0);
      randomVariableLazyEvaluation0.vid((RandomVariable) scalar0);
      randomVariableLazyEvaluation0.size();
      randomVariableLazyEvaluation0.accrue(randomVariable1, 4.0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.getMin();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No value present
         //
         verifyException("java.util.OptionalDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = 2.0;
      double[] doubleArray0 = new double[0];
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(2.0, doubleArray0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.getMin();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No value present
         //
         verifyException("java.util.OptionalDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(2.0, 0.0);
      Scalar scalar0 = new Scalar(0.0);
      DoubleUnaryOperator doubleUnaryOperator0 = DoubleUnaryOperator.identity();
      scalar0.apply(doubleUnaryOperator0);
      RandomVariable randomVariable0 = scalar0.cos();
      randomVariableLazyEvaluation0.equals(randomVariable0);
      randomVariableLazyEvaluation0.getQuantile(0.0, randomVariable0);
      randomVariableLazyEvaluation0.get(970);
      randomVariableLazyEvaluation0.getSampleVariance();
      DoubleTernaryOperator doubleTernaryOperator0 = mock(DoubleTernaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(doubleTernaryOperator0).applyAsDouble(anyDouble() , anyDouble() , anyDouble());
      randomVariableLazyEvaluation0.apply(doubleTernaryOperator0, (RandomVariable) scalar0, (RandomVariable) scalar0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = 0.01;
      double double1 = 349.825135609508;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.01, 349.825135609508);
      DoubleTernaryOperator doubleTernaryOperator0 = mock(DoubleTernaryOperator.class, new ViolatedAssumptionAnswer());
      RandomVariable randomVariable0 = null;
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.apply(doubleTernaryOperator0, (RandomVariable) null, (RandomVariable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Scalar scalar0 = new Scalar(3237.4620835431065);
      RandomVariable randomVariable0 = scalar0.expectation();
      scalar0.getOperator();
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-930.70483086), (IntToDoubleFunction) null, 954);
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.accrue(scalar0, (-930.70483086));
      randomVariableLazyEvaluation0.abs();
      randomVariableLazyEvaluation0.getStandardDeviation();
      randomVariableLazyEvaluation0.getSampleVariance();
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.sub(0.0);
      randomVariableLazyEvaluation0.addRatio(randomVariable1, randomVariable1);
      randomVariableLazyEvaluation0.mult(randomVariable0);
      scalar0.squared();
      randomVariableLazyEvaluation0.size();
      randomVariableLazyEvaluation0.getQuantile(0.0, randomVariable2);
      randomVariableLazyEvaluation0.invert();
      randomVariableLazyEvaluation0.getStandardDeviation();
      randomVariableLazyEvaluation0.bus((RandomVariable) scalar0);
      DoubleTernaryOperator doubleTernaryOperator0 = mock(DoubleTernaryOperator.class, new ViolatedAssumptionAnswer());
      RandomVariableLazyEvaluation randomVariableLazyEvaluation1 = new RandomVariableLazyEvaluation((-919.56), 4965, (-863.5976299916331));
      randomVariableLazyEvaluation0.apply(doubleTernaryOperator0, (RandomVariable) randomVariableLazyEvaluation1, randomVariable1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-3696.7243), 0.0);
      Scalar scalar0 = new Scalar(0.0);
      RandomVariable randomVariable0 = scalar0.log();
      randomVariableLazyEvaluation0.getMin();
      randomVariableLazyEvaluation0.cap(randomVariable0);
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.abs();
      randomVariableLazyEvaluation0.floor(randomVariable1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.cos();
      randomVariableLazyEvaluation0.getVariance();
      randomVariableLazyEvaluation0.getVariance();
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.exp();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2.0;
      randomVariableLazyEvaluation0.addProduct(randomVariable1, randomVariable0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      randomVariableLazyEvaluation0.getHistogram(doubleArray0);
      Scalar scalar0 = new Scalar(0.0);
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.mult((-22.67325201307));
      RandomVariable randomVariable3 = scalar0.add((RandomVariable) randomVariableLazyEvaluation0);
      randomVariableLazyEvaluation0.floor(randomVariable3);
      randomVariableLazyEvaluation0.isDeterministic();
      randomVariableLazyEvaluation0.getStandardError(randomVariable1);
      randomVariableLazyEvaluation0.cap(0.0);
      RandomVariableFromDoubleArray randomVariableFromDoubleArray0 = randomVariableLazyEvaluation0.getRandomVariable();
      RandomVariable randomVariable4 = randomVariableLazyEvaluation0.addProduct((RandomVariable) randomVariableFromDoubleArray0, 264.848633);
      RandomVariable randomVariable5 = randomVariableLazyEvaluation0.cap(randomVariable2);
      randomVariableLazyEvaluation0.addRatio(randomVariable5, randomVariable4);
      randomVariableLazyEvaluation0.isDeterministic();
      randomVariableLazyEvaluation0.getAverage();
      randomVariableLazyEvaluation0.mult(0.0);
      randomVariableLazyEvaluation0.average();
      randomVariableLazyEvaluation0.get((-2280));
      randomVariableLazyEvaluation0.isNaN();
      randomVariableLazyEvaluation0.add(166.1995484977091);
      randomVariableLazyEvaluation0.getRealizations();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-299.6));
      Scalar scalar0 = new Scalar(974.7729785);
      RandomVariable randomVariable0 = scalar0.expm1();
      scalar0.subRatio(randomVariable0, randomVariable0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-299.6);
      doubleArray0[1] = 974.7729785;
      doubleArray0[2] = 974.7729785;
      doubleArray0[3] = (-299.6);
      doubleArray0[4] = (-299.6);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-299.6);
      doubleArray1[1] = 974.7729785;
      doubleArray1[2] = (-299.6);
      doubleArray1[3] = 974.7729785;
      doubleArray1[4] = (-299.6);
      doubleArray1[5] = 974.7729785;
      doubleArray1[6] = 974.7729785;
      doubleArray1[7] = (-299.6);
      RationalFunctionInterpolation rationalFunctionInterpolation0 = new RationalFunctionInterpolation(doubleArray0, doubleArray1);
      scalar0.apply((DoubleUnaryOperator) rationalFunctionInterpolation0);
      RandomVariable randomVariable1 = scalar0.addProduct((RandomVariable) randomVariableLazyEvaluation0, (RandomVariable) randomVariableLazyEvaluation0);
      randomVariableLazyEvaluation0.accrue(randomVariable1, 1849.14474);
      randomVariableLazyEvaluation0.floor(0.0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, 2580, 0.0);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation1 = new RandomVariableLazyEvaluation(0.0, 390.0);
      randomVariableLazyEvaluation1.div((-3292.440665198615));
      // Undeclared exception!
      randomVariableLazyEvaluation0.getVariance((RandomVariable) randomVariableLazyEvaluation1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-1.7976931348623157E308));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.7976931348623157E308);
      doubleArray0[1] = (-1.7976931348623157E308);
      doubleArray0[2] = (-1.7976931348623157E308);
      doubleArray0[3] = (-1.7976931348623157E308);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1.7976931348623157E308);
      doubleArray0[6] = (-1.7976931348623157E308);
      randomVariableLazyEvaluation0.getHistogram(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Scalar scalar0 = new Scalar((-1732.4781703));
      scalar0.exp();
      scalar0.getOperator();
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(Double.NaN, (IntToDoubleFunction) null, 270);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.sub((double) 270);
      randomVariableLazyEvaluation0.bus(randomVariable0);
      randomVariableLazyEvaluation0.equals(randomVariable0);
      randomVariableLazyEvaluation0.getQuantile((double) 270, randomVariable0);
      randomVariableLazyEvaluation0.squared();
      randomVariableLazyEvaluation0.sqrt();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Scalar scalar0 = new Scalar((-2488.1071183477184));
      RandomVariable randomVariable0 = scalar0.floor((-930.4238033354));
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(randomVariable0);
      randomVariableLazyEvaluation0.addProduct(randomVariable0, 1.0);
      randomVariableLazyEvaluation0.isNaN();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2488.1071183477184);
      RationalFunctionInterpolation rationalFunctionInterpolation0 = new RationalFunctionInterpolation(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.apply((DoubleUnaryOperator) rationalFunctionInterpolation0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("net.finmath.interpolation.RationalFunctionInterpolation", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Scalar scalar0 = new Scalar(307.0905);
      scalar0.getOperator();
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(307.0905, (IntToDoubleFunction) null, 200);
      randomVariableLazyEvaluation0.getStandardError((RandomVariable) scalar0);
      randomVariableLazyEvaluation0.div(0.0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-3877.1940391241433), (-1.0));
      randomVariableLazyEvaluation0.add(2252.5679695670506);
      RandomVariable randomVariable0 = null;
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.equals((RandomVariable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Scalar scalar0 = new Scalar(0.0);
      DoubleBinaryOperator doubleBinaryOperator0 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      DoubleTernaryOperator doubleTernaryOperator0 = mock(DoubleTernaryOperator.class, new ViolatedAssumptionAnswer());
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0);
      scalar0.apply(doubleTernaryOperator0, (RandomVariable) randomVariableLazyEvaluation0, (RandomVariable) randomVariableLazyEvaluation0);
      scalar0.apply(doubleBinaryOperator0, (RandomVariable) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      RationalFunctionInterpolation.InterpolationMethod rationalFunctionInterpolation_InterpolationMethod0 = RationalFunctionInterpolation.InterpolationMethod.PIECEWISE_CONSTANT_RIGHTPOINT;
      RationalFunctionInterpolation.ExtrapolationMethod rationalFunctionInterpolation_ExtrapolationMethod0 = RationalFunctionInterpolation.ExtrapolationMethod.DEFAULT;
      RationalFunctionInterpolation rationalFunctionInterpolation0 = new RationalFunctionInterpolation(doubleArray0, doubleArray0, rationalFunctionInterpolation_InterpolationMethod0, rationalFunctionInterpolation_ExtrapolationMethod0);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation1 = null;
      try {
        randomVariableLazyEvaluation1 = new RandomVariableLazyEvaluation((RandomVariable) null, rationalFunctionInterpolation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Scalar scalar0 = new Scalar(2207.38253);
      scalar0.getOperator();
      LinkedList<RandomVariable> linkedList0 = new LinkedList<RandomVariable>();
      RandomVariable randomVariable0 = scalar0.addSumProduct((List<RandomVariable>) linkedList0, (List<RandomVariable>) linkedList0);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-918.761817334245), (IntToDoubleFunction) null, 0);
      randomVariableLazyEvaluation0.doubleValue();
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.vid(randomVariable0);
      randomVariableLazyEvaluation0.getRealizationsStream();
      randomVariableLazyEvaluation0.equals(randomVariable1);
      randomVariableLazyEvaluation0.getMax();
      randomVariableLazyEvaluation0.sqrt();
      scalar0.exp();
      randomVariableLazyEvaluation0.getVariance();
      randomVariableLazyEvaluation0.getVariance();
      randomVariableLazyEvaluation0.size();
      randomVariableLazyEvaluation0.getOperator();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 0;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-1.0), 0, 3.0);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.pow((-1.0));
      randomVariableLazyEvaluation0.getVariance(randomVariable0);
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.squared();
      randomVariableLazyEvaluation0.getSampleVariance();
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.mult(randomVariable1);
      RandomVariable randomVariable3 = randomVariableLazyEvaluation0.bus(randomVariable1);
      randomVariableLazyEvaluation0.addProduct(randomVariable2, (double) 0);
      randomVariableLazyEvaluation0.add(randomVariable3);
      randomVariableLazyEvaluation0.div(randomVariable0);
      randomVariableLazyEvaluation0.cap(3.0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.getMax();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No value present
         //
         verifyException("java.util.OptionalDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = 1169.943066662;
      int int0 = 0;
      double double1 = (-4994.74064664);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(1169.943066662, 0, (-4994.74064664));
      Scalar scalar0 = new Scalar(1169.943066662);
      RandomVariable randomVariable0 = scalar0.add((RandomVariable) randomVariableLazyEvaluation0);
      randomVariableLazyEvaluation0.getVariance(randomVariable0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.doubleValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The random variable is non-deterministic
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(2912.976141227832);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.cos();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2912.976141227832;
      doubleArray0[1] = 2912.976141227832;
      double[] doubleArray1 = randomVariableLazyEvaluation0.getHistogram(doubleArray0);
      randomVariableLazyEvaluation0.cap(randomVariable0);
      randomVariableLazyEvaluation0.cos();
      DoubleTernaryOperator doubleTernaryOperator0 = mock(DoubleTernaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(doubleTernaryOperator0).applyAsDouble(anyDouble() , anyDouble() , anyDouble());
      randomVariableLazyEvaluation0.apply(doubleTernaryOperator0, randomVariable0, randomVariable0);
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.average();
      randomVariableLazyEvaluation0.covariance(randomVariable0);
      randomVariableLazyEvaluation0.add(randomVariable1);
      randomVariableLazyEvaluation0.get(0);
      randomVariableLazyEvaluation0.average();
      RationalFunctionInterpolation.InterpolationMethod rationalFunctionInterpolation_InterpolationMethod0 = RationalFunctionInterpolation.InterpolationMethod.AKIMA;
      RationalFunctionInterpolation.ExtrapolationMethod rationalFunctionInterpolation_ExtrapolationMethod0 = RationalFunctionInterpolation.ExtrapolationMethod.DEFAULT;
      RationalFunctionInterpolation rationalFunctionInterpolation0 = new RationalFunctionInterpolation(doubleArray0, doubleArray1, rationalFunctionInterpolation_InterpolationMethod0, rationalFunctionInterpolation_ExtrapolationMethod0);
      PiecewiseContantDoubleUnaryOperator piecewiseContantDoubleUnaryOperator0 = null;
      try {
        piecewiseContantDoubleUnaryOperator0 = new PiecewiseContantDoubleUnaryOperator(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length of values must equal length of intervalRightPoints + 1.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, 0.0);
      randomVariableLazyEvaluation0.getQuantileExpectation(0.0, 0.0);
      randomVariableLazyEvaluation0.doubleValue();
      randomVariableLazyEvaluation0.getQuantile((-1.0));
      randomVariableLazyEvaluation0.getRealizationsStream();
      randomVariableLazyEvaluation0.getRealizations();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Scalar scalar0 = new Scalar(0.0);
      RandomVariable randomVariable0 = scalar0.mult(0.0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-3982.2214);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      RationalFunctionInterpolation rationalFunctionInterpolation0 = new RationalFunctionInterpolation(doubleArray0, doubleArray0);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(randomVariable0, rationalFunctionInterpolation0);
      randomVariableLazyEvaluation0.floor(randomVariable0);
      randomVariableLazyEvaluation0.sub((RandomVariable) scalar0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Scalar scalar0 = new Scalar((-3147.9));
      RandomVariable randomVariable0 = scalar0.isNaN();
      scalar0.log();
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(randomVariable0);
      randomVariableLazyEvaluation0.floor(randomVariable0);
      randomVariableLazyEvaluation0.average();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Scalar scalar0 = new Scalar(0.0);
      scalar0.getOperator();
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(314.92012957225, (IntToDoubleFunction) null, 0);
      randomVariableLazyEvaluation0.getHistogram(0, 0.0);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.sub(3513.73603);
      randomVariableLazyEvaluation0.addProduct(randomVariable0, 0.0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 688;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-141.0), 688, 688);
      Scalar scalar0 = new Scalar(688);
      RandomVariable randomVariable0 = scalar0.subRatio(randomVariableLazyEvaluation0, randomVariableLazyEvaluation0);
      randomVariableLazyEvaluation0.getVariance(randomVariable0);
      randomVariableLazyEvaluation0.isNaN();
      DoubleTernaryOperator doubleTernaryOperator0 = mock(DoubleTernaryOperator.class, new ViolatedAssumptionAnswer());
      randomVariableLazyEvaluation0.apply(doubleTernaryOperator0, randomVariable0, randomVariable0);
      RandomVariable[] randomVariableArray0 = new RandomVariable[2];
      randomVariableArray0[0] = (RandomVariable) randomVariableLazyEvaluation0;
      randomVariableArray0[1] = randomVariable0;
      RandomVariableArray randomVariableArray1 = RandomVariableArrayImplementation.of(randomVariableArray0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.getQuantile((-141.0), (RandomVariable) randomVariableArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method not implemented.
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-109.1416236), (-109.1416236));
      randomVariableLazyEvaluation0.sub((-109.1416236));
      Scalar scalar0 = new Scalar((-109.1416236));
      RandomVariable randomVariable0 = scalar0.sub((RandomVariable) randomVariableLazyEvaluation0);
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.accrue(randomVariable0, (-109.1416236));
      scalar0.cos();
      randomVariableLazyEvaluation0.bus(randomVariable1);
      randomVariableLazyEvaluation0.addProduct(randomVariable0, (-109.1416236));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, (-1645.8075492));
      randomVariableLazyEvaluation0.getRealizationsStream();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(3.0, 1, 0.0);
      randomVariableLazyEvaluation0.getOperator();
      RandomVariableLazyEvaluation randomVariableLazyEvaluation1 = new RandomVariableLazyEvaluation(randomVariableLazyEvaluation0, (DoubleUnaryOperator) null);
      randomVariableLazyEvaluation0.bus(3.0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.getStandardDeviation((RandomVariable) randomVariableLazyEvaluation1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, 200, 200);
      Scalar scalar0 = new Scalar(0.0);
      RandomVariable randomVariable0 = scalar0.exp();
      scalar0.abs();
      RandomVariable randomVariable1 = scalar0.subRatio(randomVariable0, randomVariableLazyEvaluation0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.getQuantile(1490.88, randomVariable1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method not implemented.
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Scalar scalar0 = new Scalar(0.0);
      RandomVariable randomVariable0 = scalar0.abs();
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(randomVariable0);
      scalar0.addProduct(randomVariable0, (RandomVariable) randomVariableLazyEvaluation0);
      scalar0.accrue(randomVariable0, 0.0);
      randomVariableLazyEvaluation0.sqrt();
      randomVariableLazyEvaluation0.mult(1188.025066);
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.discount(scalar0, 0.0);
      randomVariableLazyEvaluation0.add(0.0);
      randomVariableLazyEvaluation0.sub(652.0);
      randomVariableLazyEvaluation0.getAverage();
      randomVariableLazyEvaluation0.div(randomVariable1);
      randomVariableLazyEvaluation0.getMin();
      randomVariableLazyEvaluation0.size();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0);
      randomVariableLazyEvaluation0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Scalar scalar0 = new Scalar(0.0);
      RandomVariable randomVariable0 = scalar0.div((-715.393462095));
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(randomVariable0);
      randomVariableLazyEvaluation0.addRatio(scalar0, randomVariable0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(5.0);
      Scalar scalar0 = new Scalar(5.0);
      scalar0.abs();
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.vid((RandomVariable) scalar0);
      randomVariableLazyEvaluation0.sqrt();
      randomVariableLazyEvaluation0.getVariance();
      DoubleBinaryOperator doubleBinaryOperator0 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(doubleBinaryOperator0).applyAsDouble(anyDouble() , anyDouble());
      randomVariableLazyEvaluation0.apply(doubleBinaryOperator0, doubleBinaryOperator0, (RandomVariable) scalar0, randomVariable0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Scalar scalar0 = new Scalar(0.0);
      RandomVariable randomVariable0 = scalar0.average();
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(randomVariable0);
      DoubleBinaryOperator doubleBinaryOperator0 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(doubleBinaryOperator0).applyAsDouble(anyDouble() , anyDouble());
      DoubleBinaryOperator doubleBinaryOperator1 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(doubleBinaryOperator1).applyAsDouble(anyDouble() , anyDouble());
      RandomVariable randomVariable1 = scalar0.addRatio(randomVariable0, randomVariable0);
      randomVariableLazyEvaluation0.apply(doubleBinaryOperator0, doubleBinaryOperator1, (RandomVariable) scalar0, randomVariable1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.cos();
      randomVariableLazyEvaluation0.getStandardDeviation(randomVariable0);
      randomVariableLazyEvaluation0.floor(0.0);
      randomVariableLazyEvaluation0.sqrt();
      randomVariableLazyEvaluation0.size();
      randomVariableLazyEvaluation0.average();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Scalar scalar0 = new Scalar(87.98551274109);
      scalar0.getOperator();
      scalar0.div(0.01);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.01, (IntToDoubleFunction) null, 0);
      randomVariableLazyEvaluation0.getMin();
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.sub((RandomVariable) scalar0);
      randomVariableLazyEvaluation0.getRandomVariable();
      scalar0.getAverage(randomVariable0);
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.invert();
      randomVariableLazyEvaluation0.getStandardDeviation((RandomVariable) scalar0);
      RandomVariableFromDoubleArray randomVariableFromDoubleArray0 = randomVariableLazyEvaluation0.getRandomVariable();
      randomVariableLazyEvaluation0.choose(scalar0, randomVariableFromDoubleArray0);
      randomVariableLazyEvaluation0.mult((RandomVariable) randomVariableFromDoubleArray0);
      randomVariableLazyEvaluation0.getSampleVariance();
      randomVariableLazyEvaluation0.mult(randomVariable1);
      randomVariableLazyEvaluation0.cap(randomVariable1);
      randomVariableLazyEvaluation0.mult(randomVariable0);
      randomVariableLazyEvaluation0.sqrt();
      randomVariableLazyEvaluation0.floor((double) 0);
      randomVariableLazyEvaluation0.getFiltrationTime();
      randomVariableLazyEvaluation0.squared();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double double0 = (-4465.89119537198);
      double[] doubleArray0 = null;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = null;
      try {
        randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-4465.89119537198), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-3005.712468482581), doubleArray0);
      Scalar scalar0 = new Scalar(3118.901875666669);
      scalar0.addProduct((RandomVariable) randomVariableLazyEvaluation0, 3118.901875666669);
      scalar0.log();
      scalar0.expectation();
      double double0 = 2.0;
      scalar0.log();
      scalar0.accrue(randomVariableLazyEvaluation0, 2.0);
      RandomVariable randomVariable0 = scalar0.exp();
      randomVariableLazyEvaluation0.floor(randomVariable0);
      Scalar scalar1 = new Scalar((-3005.712468482581));
      randomVariableLazyEvaluation0.cos();
      scalar1.subRatio(randomVariableLazyEvaluation0, randomVariableLazyEvaluation0);
      scalar1.mult(3118.901875666669);
      randomVariableLazyEvaluation0.variance();
      randomVariableLazyEvaluation0.pow(2.0);
      randomVariableLazyEvaluation0.bus((RandomVariable) scalar1);
      randomVariableLazyEvaluation0.getQuantileExpectation((-3005.712468482581), 0.5);
      randomVariableLazyEvaluation0.getRealizations();
      randomVariableLazyEvaluation0.getFiltrationTime();
      randomVariableLazyEvaluation0.getVariance();
      randomVariableLazyEvaluation0.sub(0.0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.getMax();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No value present
         //
         verifyException("java.util.OptionalDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      RandomVariable randomVariable0 = null;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = null;
      try {
        randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((RandomVariable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = 1257;
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(6.0, 1257, 6.0);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.exp();
      double double0 = (-1933.0);
      randomVariableLazyEvaluation0.invert();
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.discount(randomVariable0, (-1933.0));
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.add(0.0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.choose(randomVariable2, randomVariable1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, 0, 0);
      randomVariableLazyEvaluation0.expand(0);
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.get(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Scalar scalar0 = new Scalar(2524.0);
      RandomVariable randomVariable0 = scalar0.sin();
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(randomVariable0);
      randomVariableLazyEvaluation0.getMin();
      randomVariableLazyEvaluation0.vid((RandomVariable) scalar0);
      randomVariableLazyEvaluation0.getAverage();
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.add(randomVariable0);
      randomVariableLazyEvaluation0.getRandomVariable();
      RandomVariable randomVariable2 = scalar0.invert();
      randomVariableLazyEvaluation0.subRatio(randomVariable1, randomVariable2);
      randomVariableLazyEvaluation0.log();
      randomVariableLazyEvaluation0.getQuantileExpectation((-0.9638516292783987), (-1.0));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(1.0, (-3471), 258.687621868);
      RandomVariableFromDoubleArray randomVariableFromDoubleArray0 = randomVariableLazyEvaluation0.getRandomVariable();
      RandomVariableLazyEvaluation randomVariableLazyEvaluation1 = new RandomVariableLazyEvaluation(randomVariableFromDoubleArray0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation1.getMax();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No value present
         //
         verifyException("java.util.OptionalDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-3005.712468482581), doubleArray0);
      Scalar scalar0 = new Scalar(3118.901875666669);
      scalar0.addProduct((RandomVariable) randomVariableLazyEvaluation0, 3118.901875666669);
      scalar0.log();
      Scalar scalar1 = new Scalar(3118.901875666669);
      double double0 = 2.0;
      scalar0.accrue(randomVariableLazyEvaluation0, 2.0);
      RandomVariable randomVariable0 = scalar0.exp();
      randomVariableLazyEvaluation0.floor(randomVariable0);
      Scalar scalar2 = new Scalar((-3005.712468482581));
      randomVariableLazyEvaluation0.cos();
      scalar2.subRatio(randomVariableLazyEvaluation0, randomVariableLazyEvaluation0);
      scalar2.mult(3118.901875666669);
      randomVariableLazyEvaluation0.variance();
      randomVariableLazyEvaluation0.bus((RandomVariable) scalar2);
      randomVariableLazyEvaluation0.getQuantileExpectation((-3005.712468482581), 0.5);
      randomVariableLazyEvaluation0.getRealizations();
      randomVariableLazyEvaluation0.getFiltrationTime();
      randomVariableLazyEvaluation0.getVariance();
      randomVariableLazyEvaluation0.sub(0.0);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.getMax();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No value present
         //
         verifyException("java.util.OptionalDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-536.4095), 0, (-536.4095));
      Scalar scalar0 = new Scalar(0);
      scalar0.log();
      scalar0.expm1();
      RandomVariable randomVariable0 = scalar0.sub((-3525.5334833));
      RandomVariable randomVariable1 = scalar0.sub(0.0);
      randomVariableLazyEvaluation0.getQuantile((-536.4095), randomVariable1);
      randomVariableLazyEvaluation0.getQuantileExpectation(0, 1070.1668031);
      randomVariableLazyEvaluation0.getRealizations();
      randomVariableLazyEvaluation0.isNaN();
      RandomVariable randomVariable2 = scalar0.bus((RandomVariable) randomVariableLazyEvaluation0);
      randomVariableLazyEvaluation0.getAverage(randomVariable2);
      RandomVariable randomVariable3 = randomVariableLazyEvaluation0.average();
      RandomVariable randomVariable4 = scalar0.sin();
      scalar0.div(1496.86);
      randomVariableLazyEvaluation0.addProduct(randomVariable2, randomVariable0);
      scalar0.getAverage(randomVariable4);
      randomVariableLazyEvaluation0.vid(randomVariable3);
      randomVariableLazyEvaluation0.average();
      randomVariableLazyEvaluation0.addProduct(randomVariable0, randomVariable2);
      randomVariableLazyEvaluation0.addProduct(randomVariable1, (-536.4095));
      randomVariableLazyEvaluation0.sub(Double.NaN);
      // Undeclared exception!
      try { 
        randomVariableLazyEvaluation0.getHistogram((-1), (double) (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Scalar scalar0 = new Scalar(2.0);
      RandomVariable randomVariable0 = scalar0.mult(0.0);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(randomVariable0);
      randomVariableLazyEvaluation0.invert();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Scalar scalar0 = new Scalar(0.5);
      scalar0.getOperator();
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(4268.9338, (IntToDoubleFunction) null, 0);
      RandomVariable randomVariable0 = scalar0.expm1();
      randomVariableLazyEvaluation0.getVariance((RandomVariable) scalar0);
      randomVariableLazyEvaluation0.cos();
      randomVariableLazyEvaluation0.discount(randomVariable0, 0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-356.1010396938327);
      doubleArray0[1] = (-1066.39102285621);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-356.1010396938327), doubleArray0);
      Scalar scalar0 = new Scalar((-1912.3565297259));
      RandomVariable randomVariable0 = scalar0.cap((RandomVariable) randomVariableLazyEvaluation0);
      randomVariableLazyEvaluation0.expectation();
      RandomVariable randomVariable1 = scalar0.sin();
      scalar0.vid(randomVariable1);
      scalar0.addProduct((RandomVariable) randomVariableLazyEvaluation0, (-356.1010396938327));
      RandomVariable randomVariable2 = scalar0.sub(randomVariable0);
      randomVariableLazyEvaluation0.choose(randomVariable0, randomVariable2);
      randomVariableLazyEvaluation0.isNaN();
      randomVariableLazyEvaluation0.getFiltrationTime();
      randomVariableLazyEvaluation0.getTypePriority();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-3753.74993566));
      Scalar scalar0 = new Scalar((-3753.74993566));
      RandomVariable randomVariable0 = scalar0.subRatio(randomVariableLazyEvaluation0, randomVariableLazyEvaluation0);
      randomVariableLazyEvaluation0.getStandardDeviation(randomVariable0);
      randomVariableLazyEvaluation0.equals(randomVariable0);
      randomVariableLazyEvaluation0.choose(randomVariable0, scalar0);
      // Undeclared exception!
      try { 
        Scalar.arrayOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.stochastic.Scalar", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Scalar scalar0 = new Scalar(0.0);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(scalar0);
      RandomVariable randomVariable0 = scalar0.bus((RandomVariable) randomVariableLazyEvaluation0);
      RandomVariable randomVariable1 = scalar0.floor(randomVariable0);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation1 = null;
      try {
        randomVariableLazyEvaluation1 = new RandomVariableLazyEvaluation(randomVariable1, (DoubleUnaryOperator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.RandomVariableLazyEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-618.166);
      doubleArray0[1] = (-618.166);
      doubleArray0[2] = (-618.166);
      doubleArray0[3] = (-618.166);
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-618.166), doubleArray0);
      Scalar scalar0 = new Scalar((-618.166));
      RandomVariable randomVariable0 = scalar0.addProduct((RandomVariable) randomVariableLazyEvaluation0, Double.NEGATIVE_INFINITY);
      randomVariableLazyEvaluation0.add(randomVariable0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Scalar scalar0 = new Scalar((-600.77403238));
      scalar0.getOperator();
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-600.77403238), (IntToDoubleFunction) null, 1264);
      randomVariableLazyEvaluation0.sqrt();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, 0, 0.0);
      randomVariableLazyEvaluation0.getQuantileExpectation(4.0, 0.0);
      randomVariableLazyEvaluation0.expand((-5831));
      randomVariableLazyEvaluation0.sub(0.0);
      randomVariableLazyEvaluation0.log();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, 861, 0.0);
      Scalar scalar0 = new Scalar(0.0);
      scalar0.abs();
      RandomVariable randomVariable0 = scalar0.vid((RandomVariable) randomVariableLazyEvaluation0);
      scalar0.getAverage(randomVariable0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(1064.05614855643, 7, 7);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.sin();
      randomVariableLazyEvaluation0.getOperator();
      randomVariableLazyEvaluation0.getStandardError();
      double double0 = Double.NaN;
      double double1 = 0.0;
      randomVariableLazyEvaluation0.addProduct(randomVariable0, randomVariable0);
      randomVariableLazyEvaluation0.getQuantileExpectation(double0, double1);
      randomVariableLazyEvaluation0.invert();
      randomVariableLazyEvaluation0.getAverage(randomVariable0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Scalar scalar0 = new Scalar(4173.19144727818);
      scalar0.getOperator();
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-1993.8743460804183), (IntToDoubleFunction) null, (-510));
      randomVariableLazyEvaluation0.expm1();
      randomVariableLazyEvaluation0.mult((-2648.1569));
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(2.0);
      Scalar scalar0 = new Scalar((-1993.8743460804183));
      RandomVariable randomVariable0 = scalar0.expectation();
      RandomVariable randomVariable1 = scalar0.cos();
      Scalar scalar1 = new Scalar(2.0);
      scalar0.squared();
      RandomVariable randomVariable2 = scalar0.mult((RandomVariable) randomVariableLazyEvaluation0);
      randomVariableLazyEvaluation0.add(randomVariable2);
      RandomVariable randomVariable3 = randomVariableLazyEvaluation0.squared();
      randomVariableLazyEvaluation0.getStandardError();
      RandomVariable randomVariable4 = scalar0.cap(0.0);
      randomVariableLazyEvaluation0.getStandardError();
      randomVariableLazyEvaluation0.getRandomVariable();
      RandomVariable randomVariable5 = randomVariableLazyEvaluation0.bus(randomVariable3);
      scalar0.variance();
      randomVariableLazyEvaluation0.getSampleVariance();
      randomVariableLazyEvaluation0.getStandardError();
      RandomVariable randomVariable6 = randomVariableLazyEvaluation0.sub(randomVariable0);
      randomVariableLazyEvaluation0.getMax();
      RandomVariableLazyEvaluation randomVariableLazyEvaluation1 = new RandomVariableLazyEvaluation((-1993.8743460804183));
      randomVariableLazyEvaluation0.getVariance();
      RandomVariable randomVariable7 = randomVariableLazyEvaluation0.addProduct(randomVariable6, randomVariable5);
      randomVariableLazyEvaluation0.choose(randomVariable7, randomVariable1);
      randomVariableLazyEvaluation0.div(0.0);
      randomVariableLazyEvaluation0.getRealizationsStream();
      randomVariableLazyEvaluation0.getVariance();
      randomVariableLazyEvaluation0.getQuantileExpectation(29.4312768688317, (-4050.2975955878));
      randomVariableLazyEvaluation0.choose(randomVariable5, randomVariable4);
      randomVariableLazyEvaluation0.doubleValue();
      randomVariableLazyEvaluation0.floor(0.0);
      randomVariableLazyEvaluation0.vid(randomVariable7);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, 1074, 1074);
      randomVariableLazyEvaluation0.getSampleVariance();
      randomVariableLazyEvaluation0.getHistogram(0, (double) 0);
      Scalar scalar0 = new Scalar(1074);
      RandomVariable randomVariable0 = scalar0.abs();
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.addRatio(randomVariable0, randomVariable0);
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.add(Double.NaN);
      randomVariableLazyEvaluation0.getQuantile(0.0);
      randomVariableLazyEvaluation0.add(randomVariable1);
      Scalar scalar1 = new Scalar(0);
      randomVariableLazyEvaluation0.log();
      RandomVariable randomVariable3 = scalar1.subRatio(randomVariable1, randomVariable2);
      randomVariableLazyEvaluation0.bus(randomVariable3);
      randomVariableLazyEvaluation0.sub(randomVariable2);
      randomVariableLazyEvaluation0.getStandardError(randomVariable0);
      randomVariableLazyEvaluation0.getStandardError();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Scalar scalar0 = new Scalar(2854.029868257);
      scalar0.getOperator();
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(2854.029868257, (IntToDoubleFunction) null, 3);
      randomVariableLazyEvaluation0.getVariance();
      scalar0.addRatio(scalar0, scalar0);
      randomVariableLazyEvaluation0.getStandardDeviation();
      randomVariableLazyEvaluation0.sub(2854.029868257);
      RandomVariable randomVariable0 = randomVariableLazyEvaluation0.accrue(scalar0, 3);
      DoubleBinaryOperator doubleBinaryOperator0 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn((double)3).when(doubleBinaryOperator0).applyAsDouble(anyDouble() , anyDouble());
      randomVariableLazyEvaluation0.apply(doubleBinaryOperator0, (RandomVariable) scalar0);
      randomVariableLazyEvaluation0.getTypePriority();
      randomVariableLazyEvaluation0.getSampleVariance();
      randomVariableLazyEvaluation0.getStandardError(randomVariable0);
      randomVariableLazyEvaluation0.addProduct((RandomVariable) scalar0, (double) 0);
      randomVariableLazyEvaluation0.pow((-2416.7));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation((-449.8686143689944));
      randomVariableLazyEvaluation0.cap((-1.0));
      randomVariableLazyEvaluation0.getQuantile(Double.NaN);
      Scalar scalar0 = new Scalar(0.0);
      randomVariableLazyEvaluation0.getMin();
      RandomVariable randomVariable0 = scalar0.add((RandomVariable) randomVariableLazyEvaluation0);
      randomVariableLazyEvaluation0.add(randomVariable0);
      randomVariableLazyEvaluation0.isDeterministic();
      randomVariableLazyEvaluation0.getQuantileExpectation(2792.2319695, 2.0);
      randomVariableLazyEvaluation0.exp();
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.pow(7842.325115);
      randomVariableLazyEvaluation0.getStandardDeviation();
      randomVariableLazyEvaluation0.cos();
      randomVariableLazyEvaluation0.abs();
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.squared();
      randomVariableLazyEvaluation0.doubleValue();
      Scalar scalar1 = new Scalar((-3328.34));
      RandomVariable randomVariable3 = scalar1.invert();
      randomVariableLazyEvaluation0.addProduct(randomVariable3, randomVariable1);
      randomVariableLazyEvaluation0.cap(2152.4147898326);
      randomVariableLazyEvaluation0.getRealizations();
      randomVariableLazyEvaluation0.mult(randomVariable2);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Scalar scalar0 = new Scalar(0.0);
      scalar0.getOperator();
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(0.0, (IntToDoubleFunction) null, 0);
      RandomVariable[] randomVariableArray0 = new RandomVariable[8];
      randomVariableArray0[0] = (RandomVariable) scalar0;
      randomVariableArray0[1] = (RandomVariable) randomVariableLazyEvaluation0;
      randomVariableArray0[2] = (RandomVariable) scalar0;
      randomVariableArray0[3] = (RandomVariable) scalar0;
      randomVariableArray0[4] = (RandomVariable) randomVariableLazyEvaluation0;
      randomVariableArray0[5] = (RandomVariable) scalar0;
      randomVariableArray0[6] = (RandomVariable) scalar0;
      randomVariableArray0[7] = (RandomVariable) randomVariableLazyEvaluation0;
      scalar0.addSumProduct(randomVariableArray0, randomVariableArray0);
      randomVariableLazyEvaluation0.getVariance();
      randomVariableLazyEvaluation0.getStandardError();
      randomVariableLazyEvaluation0.vid((RandomVariable) scalar0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      RandomVariableLazyEvaluation randomVariableLazyEvaluation0 = new RandomVariableLazyEvaluation(1.7976931348623157E308, (-1.7976931348623157E308));
      Scalar scalar0 = new Scalar(0.0);
      RandomVariable randomVariable0 = scalar0.mult((RandomVariable) randomVariableLazyEvaluation0);
      randomVariableLazyEvaluation0.getVariance(randomVariable0);
      randomVariableLazyEvaluation0.sub(0.0);
      RandomVariable randomVariable1 = randomVariableLazyEvaluation0.expand(0);
      DoubleBinaryOperator doubleBinaryOperator0 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      RandomVariable randomVariable2 = randomVariableLazyEvaluation0.apply(doubleBinaryOperator0, doubleBinaryOperator0, randomVariable1, randomVariable1);
      assertEquals(1, randomVariable2.size());
      
      randomVariableLazyEvaluation0.pow(1543.8449);
      randomVariableLazyEvaluation0.getHistogram(2358, (-1.0));
      randomVariableLazyEvaluation0.getStandardDeviation();
      RandomVariable randomVariable3 = randomVariableLazyEvaluation0.log();
      randomVariableLazyEvaluation0.getRealizations();
      randomVariableLazyEvaluation0.sin();
      randomVariableLazyEvaluation0.getQuantile(4609.541243839914, randomVariable0);
      randomVariableLazyEvaluation0.getOperator();
      Scalar scalar1 = new Scalar((-1903.4786594));
      RandomVariable randomVariable4 = scalar1.invert();
      randomVariableLazyEvaluation0.getQuantile(4609.541243839914, randomVariable4);
      randomVariableLazyEvaluation0.floor(randomVariable1);
      RandomVariable randomVariable5 = randomVariableLazyEvaluation0.addRatio(scalar1, randomVariable3);
      assertTrue(randomVariable5.isDeterministic());
      
      RandomVariable randomVariable6 = scalar1.invert();
      randomVariableLazyEvaluation0.getStandardDeviation(randomVariable6);
      assertEquals(1, randomVariableLazyEvaluation0.size());
  }
}
