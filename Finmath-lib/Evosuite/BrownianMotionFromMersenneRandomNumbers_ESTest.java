/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 21 14:44:06 GMT 2022
 */

package net.finmath.montecarlo;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.function.Predicate;
import java.util.stream.DoubleStream;
import java.util.stream.Stream;
import net.finmath.montecarlo.BrownianMotionFromMersenneRandomNumbers;
import net.finmath.montecarlo.RandomVariableFactory;
import net.finmath.montecarlo.RandomVariableFloatFactory;
import net.finmath.montecarlo.RandomVariableFromArrayFactory;
import net.finmath.montecarlo.RandomVariableLazyEvaluationFactory;
import net.finmath.stochastic.RandomVariable;
import net.finmath.stochastic.Scalar;
import net.finmath.time.TenorFromArray;
import net.finmath.time.TimeDiscretization;
import net.finmath.time.TimeDiscretizationFromArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BrownianMotionFromMersenneRandomNumbers_ESTest extends BrownianMotionFromMersenneRandomNumbers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Scalar scalar0 = new Scalar(Double.NaN);
      Double double0 = scalar0.doubleValue();
      doubleArray0[0] = double0;
      Double double1 = new Double(Double.NaN);
      Double.isFinite((-585.18929));
      doubleArray0[1] = double1;
      TimeDiscretizationFromArray timeDiscretizationFromArray0 = new TimeDiscretizationFromArray(doubleArray0, (-2739.5979936586564));
      timeDiscretizationFromArray0.spliterator();
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(timeDiscretizationFromArray0, 986, 986, 986);
      TimeDiscretization timeDiscretization0 = brownianMotionFromMersenneRandomNumbers0.getTimeDiscretization();
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers1 = (BrownianMotionFromMersenneRandomNumbers)brownianMotionFromMersenneRandomNumbers0.getCloneWithModifiedTimeDiscretization(timeDiscretizationFromArray0);
      Double double2 = new Double(619.1358728906196);
      brownianMotionFromMersenneRandomNumbers1.equals(double2);
      RandomVariableFloatFactory randomVariableFloatFactory0 = new RandomVariableFloatFactory();
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers2 = new BrownianMotionFromMersenneRandomNumbers(timeDiscretization0, 986, 986, 986, randomVariableFloatFactory0);
      brownianMotionFromMersenneRandomNumbers1.equals(brownianMotionFromMersenneRandomNumbers2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1497.7583780565;
      doubleArray0[1] = (-1.934965968323401);
      doubleArray0[2] = 2435.8652550178;
      doubleArray0[3] = (-2446.543124459142);
      doubleArray0[4] = 22.98551095181167;
      doubleArray0[6] = 4.0;
      Stream.builder();
      TimeDiscretizationFromArray timeDiscretizationFromArray0 = new TimeDiscretizationFromArray(2435.8652550178, 3238, (-1414.11862877346));
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(timeDiscretizationFromArray0, 1724, 1720, 3238);
      // Undeclared exception!
      brownianMotionFromMersenneRandomNumbers0.getIncrement(0, 1025);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TenorFromArray tenorFromArray0 = new TenorFromArray((-3880.978646929834), (-2750), (-2750));
      DoubleStream doubleStream0 = tenorFromArray0.doubleStream();
      Stream.Builder<Double> stream_Builder0 = Stream.builder();
      tenorFromArray0.forEach(stream_Builder0);
      TimeDiscretizationFromArray timeDiscretizationFromArray0 = new TimeDiscretizationFromArray(doubleStream0, false);
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(timeDiscretizationFromArray0, 31, 31, (-1966));
      Stream.Builder<Double> stream_Builder1 = Stream.builder();
      tenorFromArray0.forEach(stream_Builder1);
      timeDiscretizationFromArray0.spliterator();
      brownianMotionFromMersenneRandomNumbers0.equals(doubleStream0);
      tenorFromArray0.intersect(timeDiscretizationFromArray0);
      brownianMotionFromMersenneRandomNumbers0.hashCode();
      Scalar scalar0 = new Scalar((-2750));
      timeDiscretizationFromArray0.doubleStream();
      brownianMotionFromMersenneRandomNumbers0.getRandomVariableForConstant((-268.8));
      brownianMotionFromMersenneRandomNumbers0.getSeed();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TenorFromArray tenorFromArray0 = new TenorFromArray((-3420.7820006060297), 1305, 1305);
      int int0 = 1231;
      int int1 = 0;
      RandomVariableFloatFactory randomVariableFloatFactory0 = new RandomVariableFloatFactory();
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(tenorFromArray0, 1305, 1231, 0, randomVariableFloatFactory0);
      int int2 = (-511);
      // Undeclared exception!
      brownianMotionFromMersenneRandomNumbers0.getBrownianIncrement(1231, 1305);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      TimeDiscretizationFromArray.ShortPeriodLocation timeDiscretizationFromArray_ShortPeriodLocation0 = TimeDiscretizationFromArray.ShortPeriodLocation.SHORT_PERIOD_AT_START;
      TenorFromArray tenorFromArray0 = new TenorFromArray(3.557678449715009E128, 0, 0, timeDiscretizationFromArray_ShortPeriodLocation0);
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(tenorFromArray0, 313, 1335, 153, (RandomVariableFactory) null);
      brownianMotionFromMersenneRandomNumbers0.getCloneWithModifiedTimeDiscretization(tenorFromArray0);
      // Undeclared exception!
      try { 
        brownianMotionFromMersenneRandomNumbers0.getRandomVariableForConstant(153);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.BrownianMotionFromMersenneRandomNumbers", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeDiscretizationFromArray.ShortPeriodLocation timeDiscretizationFromArray_ShortPeriodLocation0 = TimeDiscretizationFromArray.ShortPeriodLocation.SHORT_PERIOD_AT_END;
      TenorFromArray tenorFromArray0 = new TenorFromArray(3968.02801, 3968.02801, 3968.02801, timeDiscretizationFromArray_ShortPeriodLocation0);
      RandomVariableFromArrayFactory randomVariableFromArrayFactory0 = new RandomVariableFromArrayFactory();
      tenorFromArray0.iterator();
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(tenorFromArray0, 7, 7, 7, randomVariableFromArrayFactory0);
      brownianMotionFromMersenneRandomNumbers0.getTimeDiscretization();
      brownianMotionFromMersenneRandomNumbers0.getCloneWithModifiedTimeDiscretization(tenorFromArray0);
      brownianMotionFromMersenneRandomNumbers0.hashCode();
      // Undeclared exception!
      try { 
        brownianMotionFromMersenneRandomNumbers0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.time.TenorFromArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeDiscretization timeDiscretization0 = null;
      RandomVariableLazyEvaluationFactory randomVariableLazyEvaluationFactory0 = new RandomVariableLazyEvaluationFactory();
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers((TimeDiscretization) null, 4191, 4191, 0, randomVariableLazyEvaluationFactory0);
      // Undeclared exception!
      try { 
        brownianMotionFromMersenneRandomNumbers0.getIncrement((-211), 4191);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.BrownianMotionFromMersenneRandomNumbers", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1122.557;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 3140.8650724;
      doubleArray0[4] = 2063.76994232;
      TimeDiscretizationFromArray timeDiscretizationFromArray0 = new TimeDiscretizationFromArray(doubleArray0);
      int int0 = 6;
      int int1 = (-472);
      DoubleStream doubleStream0 = DoubleStream.of(2128.72467);
      TimeDiscretizationFromArray timeDiscretizationFromArray1 = new TimeDiscretizationFromArray(doubleStream0, 643.66530707272);
      timeDiscretizationFromArray1.getTimeShiftedTimeDiscretization(1.0);
      timeDiscretizationFromArray0.union(timeDiscretizationFromArray1);
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(timeDiscretizationFromArray0, 6, 6, (-472));
      // Undeclared exception!
      try { 
        brownianMotionFromMersenneRandomNumbers0.getBrownianIncrement(6, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("net.finmath.montecarlo.BrownianMotionFromMersenneRandomNumbers", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Scalar scalar0 = new Scalar(Double.NaN);
      Double double0 = scalar0.doubleValue();
      doubleArray0[0] = double0;
      Double double1 = new Double((-56.0027));
      doubleArray0[1] = double1;
      TimeDiscretizationFromArray timeDiscretizationFromArray0 = new TimeDiscretizationFromArray(doubleArray0, (-2739.5979936586564));
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(timeDiscretizationFromArray0, 986, 986, 986);
      brownianMotionFromMersenneRandomNumbers0.getTimeDiscretization();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0.0);
      Double.sum(2416.803418700259, 0.0);
      Double.sum(0.0, 2416.803418700259);
      doubleArray0[0] = double0;
      Double.min(0.0, 2416.803418700259);
      Double.isFinite(0.0);
      TimeDiscretizationFromArray timeDiscretizationFromArray0 = new TimeDiscretizationFromArray(doubleArray0, 0.0);
      timeDiscretizationFromArray0.getAsArrayList();
      double double1 = (-1.0);
      timeDiscretizationFromArray0.getTimeShiftedTimeDiscretization((-1.0));
      Double.sum((-1.0), 533.72);
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(timeDiscretizationFromArray0, 1728, 1728, 0);
      brownianMotionFromMersenneRandomNumbers0.toString();
      Double.sum((-1.0), 2416.803418700259);
      Double.isFinite(1728);
      brownianMotionFromMersenneRandomNumbers0.getSeed();
      brownianMotionFromMersenneRandomNumbers0.equals(timeDiscretizationFromArray0);
      brownianMotionFromMersenneRandomNumbers0.getRandomVariableForConstant(0.0);
      timeDiscretizationFromArray0.getTimeShiftedTimeDiscretization(0);
      double double2 = 838.219922646748;
      // Undeclared exception!
      try { 
        brownianMotionFromMersenneRandomNumbers0.getIncrement(1704, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1704
         //
         verifyException("net.finmath.montecarlo.BrownianMotionFromMersenneRandomNumbers", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashSet<Double> hashSet0 = new HashSet<Double>();
      LinkedList<Double> linkedList0 = new LinkedList<Double>(hashSet0);
      TimeDiscretizationFromArray timeDiscretizationFromArray0 = new TimeDiscretizationFromArray(linkedList0, false);
      int int0 = 21;
      RandomVariableLazyEvaluationFactory randomVariableLazyEvaluationFactory0 = new RandomVariableLazyEvaluationFactory();
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(timeDiscretizationFromArray0, 21, 21, 0, randomVariableLazyEvaluationFactory0);
      int int1 = (-763);
      // Undeclared exception!
      try { 
        brownianMotionFromMersenneRandomNumbers0.getBrownianIncrement((-763), (-189));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.BrownianMotionFromMersenneRandomNumbers", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1497.7583780565;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2435.8652550178;
      doubleArray0[3] = (-2453.186291308601);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-2075.4947);
      doubleArray0[6] = 4.0;
      TimeDiscretizationFromArray timeDiscretizationFromArray0 = new TimeDiscretizationFromArray(doubleArray0);
      Stream.Builder<Object> stream_Builder0 = Stream.builder();
      timeDiscretizationFromArray0.forEach(stream_Builder0);
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(timeDiscretizationFromArray0, 624, 1720, 624);
      int int0 = 1241;
      // Undeclared exception!
      brownianMotionFromMersenneRandomNumbers0.getBrownianIncrement(1241, 624);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayDeque<Double> arrayDeque0 = new ArrayDeque<Double>();
      TimeDiscretizationFromArray timeDiscretizationFromArray0 = new TimeDiscretizationFromArray(arrayDeque0, 1.0);
      RandomVariableFromArrayFactory randomVariableFromArrayFactory0 = new RandomVariableFromArrayFactory();
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(timeDiscretizationFromArray0, 1595, 1595, 3748, randomVariableFromArrayFactory0);
      brownianMotionFromMersenneRandomNumbers0.getCloneWithModifiedSeed(1595);
      brownianMotionFromMersenneRandomNumbers0.getSeed();
      brownianMotionFromMersenneRandomNumbers0.getNumberOfPaths();
      brownianMotionFromMersenneRandomNumbers0.getSeed();
      // Undeclared exception!
      try { 
        brownianMotionFromMersenneRandomNumbers0.getCloneWithModifiedSeed(2351);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeDiscretization timeDiscretization0 = null;
      int int0 = 1766;
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers((TimeDiscretization) null, 1766, 1766, 1766);
      brownianMotionFromMersenneRandomNumbers0.getRandomVariableForConstant(1766);
      brownianMotionFromMersenneRandomNumbers0.getCloneWithModifiedSeed(1766);
      // Undeclared exception!
      try { 
        brownianMotionFromMersenneRandomNumbers0.getBrownianIncrement(1766, 1766);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.BrownianMotionFromMersenneRandomNumbers", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TreeSet<Double> treeSet0 = new TreeSet<Double>();
      TreeSet<Double> treeSet1 = new TreeSet<Double>((SortedSet<Double>) treeSet0);
      TimeDiscretizationFromArray timeDiscretizationFromArray0 = new TimeDiscretizationFromArray(treeSet1, 0.0, true);
      RandomVariableFloatFactory randomVariableFloatFactory0 = new RandomVariableFloatFactory();
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(timeDiscretizationFromArray0, 1645, 16, 16, randomVariableFloatFactory0);
      brownianMotionFromMersenneRandomNumbers0.toString();
      brownianMotionFromMersenneRandomNumbers0.getCloneWithModifiedSeed((-375));
      brownianMotionFromMersenneRandomNumbers0.getTimeDiscretization();
      treeSet0.descendingIterator();
      brownianMotionFromMersenneRandomNumbers0.getRandomVariableForConstant(16);
      brownianMotionFromMersenneRandomNumbers0.getNumberOfFactors();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double double0 = 303.40504297841;
      TimeDiscretizationFromArray timeDiscretizationFromArray0 = new TimeDiscretizationFromArray(doubleArray0, 303.40504297841);
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(timeDiscretizationFromArray0, 842, 842, 0);
      brownianMotionFromMersenneRandomNumbers0.getRandomVariableForConstant(0);
      brownianMotionFromMersenneRandomNumbers0.getCloneWithModifiedTimeDiscretization(timeDiscretizationFromArray0);
      timeDiscretizationFromArray0.getAsArrayList();
      timeDiscretizationFromArray0.doubleStream();
      // Undeclared exception!
      try { 
        brownianMotionFromMersenneRandomNumbers0.getBrownianIncrement((-1636.9869851), 31);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.BrownianMotionFromMersenneRandomNumbers", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeDiscretizationFromArray.ShortPeriodLocation timeDiscretizationFromArray_ShortPeriodLocation0 = TimeDiscretizationFromArray.ShortPeriodLocation.SHORT_PERIOD_AT_END;
      TenorFromArray tenorFromArray0 = new TenorFromArray(2415.27379045, 0.0, 0.0, timeDiscretizationFromArray_ShortPeriodLocation0);
      TimeDiscretizationFromArray timeDiscretizationFromArray0 = new TimeDiscretizationFromArray(tenorFromArray0, true);
      TimeDiscretization timeDiscretization0 = tenorFromArray0.intersect(timeDiscretizationFromArray0);
      TimeDiscretization timeDiscretization1 = tenorFromArray0.union(timeDiscretization0);
      RandomVariableFloatFactory randomVariableFloatFactory0 = new RandomVariableFloatFactory();
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(timeDiscretization1, 27, 27, 27, randomVariableFloatFactory0);
      brownianMotionFromMersenneRandomNumbers0.toString();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeDiscretizationFromArray.ShortPeriodLocation timeDiscretizationFromArray_ShortPeriodLocation0 = TimeDiscretizationFromArray.ShortPeriodLocation.SHORT_PERIOD_AT_END;
      TenorFromArray tenorFromArray0 = new TenorFromArray(3968.02801, 3968.02801, 3968.02801, timeDiscretizationFromArray_ShortPeriodLocation0);
      RandomVariableFromArrayFactory randomVariableFromArrayFactory0 = new RandomVariableFromArrayFactory();
      tenorFromArray0.iterator();
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(tenorFromArray0, 7, 7, 7, randomVariableFromArrayFactory0);
      brownianMotionFromMersenneRandomNumbers0.getTimeDiscretization();
      brownianMotionFromMersenneRandomNumbers0.getCloneWithModifiedTimeDiscretization(tenorFromArray0);
      brownianMotionFromMersenneRandomNumbers0.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      TenorFromArray tenorFromArray0 = new TenorFromArray(0.0, 0, 0.0);
      TimeDiscretizationFromArray.ShortPeriodLocation timeDiscretizationFromArray_ShortPeriodLocation0 = TimeDiscretizationFromArray.ShortPeriodLocation.SHORT_PERIOD_AT_END;
      TenorFromArray tenorFromArray1 = new TenorFromArray((-917.1), (-917.1), (-917.1), timeDiscretizationFromArray_ShortPeriodLocation0);
      TimeDiscretization timeDiscretization0 = tenorFromArray0.union(tenorFromArray1);
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(timeDiscretization0, 9, 2375, 9);
      tenorFromArray0.iterator();
      brownianMotionFromMersenneRandomNumbers0.getRandomVariableForConstant(2269.349588113296);
      brownianMotionFromMersenneRandomNumbers0.getRandomVariableForConstant((-2409.1815071));
      tenorFromArray1.union(tenorFromArray0);
      brownianMotionFromMersenneRandomNumbers0.getTimeDiscretization();
      // Undeclared exception!
      brownianMotionFromMersenneRandomNumbers0.getIncrement(2375, 1074);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeDiscretizationFromArray.ShortPeriodLocation timeDiscretizationFromArray_ShortPeriodLocation0 = TimeDiscretizationFromArray.ShortPeriodLocation.SHORT_PERIOD_AT_START;
      TenorFromArray tenorFromArray0 = new TenorFromArray(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-2493.54), timeDiscretizationFromArray_ShortPeriodLocation0);
      int int0 = 136;
      RandomVariableFloatFactory randomVariableFloatFactory0 = new RandomVariableFloatFactory();
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = null;
      try {
        brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(tenorFromArray0, 136, 0, 0, randomVariableFloatFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of paths must be greater or equal 1 (given 0).
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.1415525114155251E-4;
      TimeDiscretizationFromArray timeDiscretizationFromArray0 = new TimeDiscretizationFromArray(doubleArray0);
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(timeDiscretizationFromArray0, 6049, 6049, 6049);
      brownianMotionFromMersenneRandomNumbers0.getRandomVariableForConstant(1.1415525114155251E-4);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(2586.34235528);
      doubleArray0[0] = double0;
      Double double1 = new Double(2586.34235528);
      doubleArray0[1] = double1;
      Double double2 = new Double(2586.34235528);
      doubleArray0[2] = double2;
      TenorFromArray tenorFromArray0 = new TenorFromArray(doubleArray0);
      RandomVariableFloatFactory randomVariableFloatFactory0 = new RandomVariableFloatFactory();
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(tenorFromArray0, 1790, 293, (-63), randomVariableFloatFactory0);
      Double.isFinite((-2646.0));
      // Undeclared exception!
      try { 
        brownianMotionFromMersenneRandomNumbers0.getBrownianIncrement(3220.3, (-63));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("net.finmath.montecarlo.BrownianMotionFromMersenneRandomNumbers", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-2079.4));
      doubleArray0[0] = double0;
      TimeDiscretizationFromArray timeDiscretizationFromArray0 = new TimeDiscretizationFromArray(doubleArray0, (-2764.8671914112674));
      Double.sum(0.0, 0.0);
      int int0 = 3108;
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(timeDiscretizationFromArray0, 3108, 3108, 3108);
      // Undeclared exception!
      try { 
        brownianMotionFromMersenneRandomNumbers0.getIncrement(3108, 3108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3108
         //
         verifyException("net.finmath.montecarlo.BrownianMotionFromMersenneRandomNumbers", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PriorityQueue<Double> priorityQueue0 = new PriorityQueue<Double>();
      PriorityQueue<Double> priorityQueue1 = new PriorityQueue<Double>(priorityQueue0);
      Double double0 = new Double(0.01);
      priorityQueue1.add(double0);
      PriorityQueue<Double> priorityQueue2 = new PriorityQueue<Double>(priorityQueue1);
      TimeDiscretizationFromArray timeDiscretizationFromArray0 = new TimeDiscretizationFromArray(priorityQueue2, 1382.9901678);
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = null;
      try {
        brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(timeDiscretizationFromArray0, (-754), 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of factors must be greater or equal 1 (given -754).
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeDiscretization timeDiscretization0 = null;
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers((TimeDiscretization) null, 2564, 2564, 0);
      // Undeclared exception!
      try { 
        brownianMotionFromMersenneRandomNumbers0.getBrownianIncrement((double) 2564, 2564);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.BrownianMotion", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeDiscretizationFromArray.ShortPeriodLocation timeDiscretizationFromArray_ShortPeriodLocation0 = TimeDiscretizationFromArray.ShortPeriodLocation.SHORT_PERIOD_AT_END;
      TenorFromArray tenorFromArray0 = new TenorFromArray(1737.15656429766, 681.405230331, 1737.15656429766, timeDiscretizationFromArray_ShortPeriodLocation0);
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(tenorFromArray0, 227, 227, 227);
      // Undeclared exception!
      try { 
        brownianMotionFromMersenneRandomNumbers0.getBrownianIncrement(666, 666);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 666
         //
         verifyException("net.finmath.montecarlo.BrownianMotionFromMersenneRandomNumbers", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = (-5380);
      int int1 = 0;
      int int2 = 337;
      RandomVariableFromArrayFactory randomVariableFromArrayFactory0 = new RandomVariableFromArrayFactory();
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = null;
      try {
        brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers((TimeDiscretization) null, (-5380), 0, 337, randomVariableFromArrayFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of factors must be greater or equal 1 (given -5380).
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DoubleStream doubleStream0 = DoubleStream.empty();
      Stream<Double> stream0 = doubleStream0.boxed();
      TimeDiscretizationFromArray timeDiscretizationFromArray0 = new TimeDiscretizationFromArray(stream0, 1.0);
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(timeDiscretizationFromArray0, 1448, 113, 1448);
      brownianMotionFromMersenneRandomNumbers0.equals((Object) null);
      brownianMotionFromMersenneRandomNumbers0.getTimeDiscretization();
      int int0 = 3104;
      Predicate.isEqual((Object) timeDiscretizationFromArray0);
      Stream<String> stream1 = Stream.empty();
      // Undeclared exception!
      try { 
        Stream.concat((Stream<? extends String>) stream1, (Stream<? extends String>) stream1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // stream has already been operated upon or closed
         //
         verifyException("java.util.stream.AbstractPipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = (-228.672087522);
      TimeDiscretizationFromArray.ShortPeriodLocation timeDiscretizationFromArray_ShortPeriodLocation0 = TimeDiscretizationFromArray.ShortPeriodLocation.SHORT_PERIOD_AT_START;
      TenorFromArray tenorFromArray0 = new TenorFromArray((-228.672087522), (-228.672087522), (-228.672087522), timeDiscretizationFromArray_ShortPeriodLocation0);
      RandomVariableFromArrayFactory randomVariableFromArrayFactory0 = new RandomVariableFromArrayFactory(true);
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = null;
      try {
        brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(tenorFromArray0, 606, (-2809), (-2809), randomVariableFromArrayFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of paths must be greater or equal 1 (given -2809).
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0.0);
      Double.sum(2416.803418700259, 0.0);
      Double.sum(0.0, 2416.803418700259);
      doubleArray0[0] = double0;
      Double.min(0.0, 2416.803418700259);
      Double.isFinite(0.0);
      TimeDiscretizationFromArray timeDiscretizationFromArray0 = new TimeDiscretizationFromArray(doubleArray0, 0.0);
      timeDiscretizationFromArray0.getAsArrayList();
      Double.sum((-1.0), 533.72);
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(timeDiscretizationFromArray0, 1728, 1728, 0);
      brownianMotionFromMersenneRandomNumbers0.toString();
      Double.sum((-1.0), 2416.803418700259);
      Double.isFinite(1728);
      brownianMotionFromMersenneRandomNumbers0.getSeed();
      brownianMotionFromMersenneRandomNumbers0.equals(timeDiscretizationFromArray0);
      brownianMotionFromMersenneRandomNumbers0.getRandomVariableForConstant(0.0);
      timeDiscretizationFromArray0.getTimeShiftedTimeDiscretization(0);
      brownianMotionFromMersenneRandomNumbers0.getRandomVariableForConstant(838.219922646748);
      brownianMotionFromMersenneRandomNumbers0.getRandomVariableForConstant((-1.0));
      brownianMotionFromMersenneRandomNumbers0.getNumberOfFactors();
      brownianMotionFromMersenneRandomNumbers0.getNumberOfFactors();
      brownianMotionFromMersenneRandomNumbers0.getCloneWithModifiedSeed(0);
      brownianMotionFromMersenneRandomNumbers0.toString();
      brownianMotionFromMersenneRandomNumbers0.getTimeDiscretization();
      brownianMotionFromMersenneRandomNumbers0.getSeed();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2081.851621751705);
      doubleArray0[1] = 130.6956;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1930.9170985255394;
      doubleArray0[4] = 0.0;
      doubleArray0[6] = 6.0;
      DoubleStream doubleStream0 = DoubleStream.of(doubleArray0);
      TimeDiscretizationFromArray timeDiscretizationFromArray0 = new TimeDiscretizationFromArray(doubleStream0, true);
      TimeDiscretizationFromArray timeDiscretizationFromArray1 = new TimeDiscretizationFromArray(timeDiscretizationFromArray0, 6.0);
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = null;
      try {
        brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(timeDiscretizationFromArray1, 0, 0, (-1982));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of factors must be greater or equal 1 (given 0).
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1497.7583780565;
      doubleArray0[1] = (-1.934965968323401);
      doubleArray0[2] = 2435.8652550178;
      doubleArray0[3] = (-2446.543124459142);
      doubleArray0[4] = 22.98551095181167;
      doubleArray0[6] = 4.0;
      TimeDiscretizationFromArray timeDiscretizationFromArray0 = new TimeDiscretizationFromArray(doubleArray0);
      int int0 = 624;
      Stream.Builder<Object> stream_Builder0 = Stream.builder();
      timeDiscretizationFromArray0.forEach(stream_Builder0);
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(timeDiscretizationFromArray0, 624, 1720, 624);
      // Undeclared exception!
      brownianMotionFromMersenneRandomNumbers0.getBrownianIncrement(1720, 624);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TenorFromArray tenorFromArray0 = new TenorFromArray((-3880.978646929834), (-2750), (-2750));
      DoubleStream doubleStream0 = tenorFromArray0.doubleStream();
      Stream.Builder<Double> stream_Builder0 = Stream.builder();
      tenorFromArray0.forEach(stream_Builder0);
      TimeDiscretizationFromArray timeDiscretizationFromArray0 = new TimeDiscretizationFromArray(doubleStream0, false);
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(timeDiscretizationFromArray0, 31, 31, (-1966));
      Stream.Builder<Double> stream_Builder1 = Stream.builder();
      tenorFromArray0.forEach(stream_Builder1);
      timeDiscretizationFromArray0.spliterator();
      brownianMotionFromMersenneRandomNumbers0.equals(doubleStream0);
      tenorFromArray0.intersect(timeDiscretizationFromArray0);
      brownianMotionFromMersenneRandomNumbers0.hashCode();
      // Undeclared exception!
      try { 
        brownianMotionFromMersenneRandomNumbers0.getIncrement((-1966), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.montecarlo.BrownianMotionFromMersenneRandomNumbers", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 388.9202;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 3140.8650724;
      doubleArray0[4] = 2063.76994232;
      TimeDiscretizationFromArray timeDiscretizationFromArray0 = new TimeDiscretizationFromArray(doubleArray0);
      int int0 = 6;
      int int1 = (-472);
      DoubleStream.of(2128.72467);
      timeDiscretizationFromArray0.getTimeShiftedTimeDiscretization(1.0);
      timeDiscretizationFromArray0.union(timeDiscretizationFromArray0);
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(timeDiscretizationFromArray0, 6, 6, (-472));
      brownianMotionFromMersenneRandomNumbers0.getCloneWithModifiedSeed((-1));
      // Undeclared exception!
      try { 
        brownianMotionFromMersenneRandomNumbers0.getCloneWithModifiedSeed(31);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Scalar scalar0 = new Scalar(Double.NaN);
      Double double0 = new Double(Double.NaN);
      doubleArray0[0] = double0;
      Double double1 = new Double(Double.NaN);
      Double.isFinite((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      TimeDiscretizationFromArray timeDiscretizationFromArray0 = new TimeDiscretizationFromArray(doubleArray0, (-2739.5979936586564));
      timeDiscretizationFromArray0.spliterator();
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers0 = new BrownianMotionFromMersenneRandomNumbers(timeDiscretizationFromArray0, 986, 986, 986);
      TimeDiscretization timeDiscretization0 = brownianMotionFromMersenneRandomNumbers0.getTimeDiscretization();
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers1 = (BrownianMotionFromMersenneRandomNumbers)brownianMotionFromMersenneRandomNumbers0.getCloneWithModifiedTimeDiscretization(timeDiscretizationFromArray0);
      Double double2 = new Double(619.1358728906196);
      boolean boolean0 = brownianMotionFromMersenneRandomNumbers1.equals(double2);
      RandomVariableFloatFactory randomVariableFloatFactory0 = new RandomVariableFloatFactory();
      BrownianMotionFromMersenneRandomNumbers brownianMotionFromMersenneRandomNumbers2 = new BrownianMotionFromMersenneRandomNumbers(timeDiscretization0, 986, 986, 986, randomVariableFloatFactory0);
      boolean boolean1 = brownianMotionFromMersenneRandomNumbers1.equals(brownianMotionFromMersenneRandomNumbers2);
      assertFalse(boolean1 == boolean0);
      assertEquals(986, brownianMotionFromMersenneRandomNumbers0.getNumberOfPaths());
      assertTrue(brownianMotionFromMersenneRandomNumbers1.equals((Object)brownianMotionFromMersenneRandomNumbers0));
      assertEquals(986, brownianMotionFromMersenneRandomNumbers0.getNumberOfFactors());
      assertTrue(boolean1);
  }
}
