/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 13 09:36:47 GMT 2022
 */

package net.finmath.marketdata.model.curves;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Vector;
import net.finmath.marketdata.model.AnalyticModel;
import net.finmath.marketdata.model.AnalyticModelFromCurvesAndVols;
import net.finmath.marketdata.model.curves.Curve;
import net.finmath.marketdata.model.curves.CurveInterpolation;
import net.finmath.marketdata.model.curves.DiscountCurveFromForwardCurve;
import net.finmath.marketdata.model.curves.DiscountCurveInterpolation;
import net.finmath.marketdata.model.curves.ForwardCurve;
import net.finmath.marketdata.model.curves.ForwardCurveFromDiscountCurve;
import net.finmath.marketdata.model.curves.ForwardCurveInterpolation;
import net.finmath.marketdata.model.curves.ForwardCurveNelsonSiegelSvensson;
import net.finmath.time.businessdaycalendar.BusinessdayCalendar;
import net.finmath.time.businessdaycalendar.BusinessdayCalendarAny;
import net.finmath.time.businessdaycalendar.BusinessdayCalendarExcludingLONHolidays;
import net.finmath.time.businessdaycalendar.BusinessdayCalendarExcludingNYCHolidays;
import net.finmath.time.daycount.DayCountConvention_30E_360_ISDA;
import net.finmath.time.daycount.DayCountConvention_ACT_ACT_YEARFRAC;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DiscountCurveFromForwardCurve_ESTest extends DiscountCurveFromForwardCurve_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve("d(2ezeu+kTSn", (-3959.0));
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve1 = new DiscountCurveFromForwardCurve("d(2ezeu+kTSn");
      boolean boolean0 = discountCurveFromForwardCurve0.equals(discountCurveFromForwardCurve1);
      assertFalse(boolean0);
      assertFalse(discountCurveFromForwardCurve1.equals((Object)discountCurveFromForwardCurve0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve("#o=UdoxSRMS^s0h.", (-1129.7695460592543));
      discountCurveFromForwardCurve0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 0.9;
      doubleArray0[2] = 2753.43879225;
      ForwardCurveInterpolation forwardCurveInterpolation0 = ForwardCurveInterpolation.createForwardCurveFromDiscountFactors("Fdq,KOW3@A!CdR2$dD", doubleArray0, doubleArray0, 1.494140625);
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve(forwardCurveInterpolation0, 10.2);
      AnalyticModelFromCurvesAndVols analyticModelFromCurvesAndVols0 = new AnalyticModelFromCurvesAndVols();
      double double0 = discountCurveFromForwardCurve0.getValue((AnalyticModel) analyticModelFromCurvesAndVols0, 1.494140625);
      assertEquals((-0.0627604805099289), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2.0);
      doubleArray0[1] = 2267.4991952;
      doubleArray0[3] = 2613.4206;
      doubleArray0[4] = 2276.0;
      doubleArray0[5] = 1.1415525114155251E-4;
      doubleArray0[6] = 4445.21314314624;
      ForwardCurveInterpolation forwardCurveInterpolation0 = ForwardCurveInterpolation.createForwardCurveFromDiscountFactors("", doubleArray0, doubleArray0, 827.8324631071984);
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve(forwardCurveInterpolation0);
      AnalyticModelFromCurvesAndVols analyticModelFromCurvesAndVols0 = new AnalyticModelFromCurvesAndVols();
      double double0 = discountCurveFromForwardCurve0.getValue((AnalyticModel) analyticModelFromCurvesAndVols0, 2267.4991952);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 0.9;
      doubleArray0[2] = 2753.43879225;
      ForwardCurveInterpolation forwardCurveInterpolation0 = ForwardCurveInterpolation.createForwardCurveFromDiscountFactors("Fdq,KOW3@A!CdR2$dD", doubleArray0, doubleArray0, 1.494140625);
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve(forwardCurveInterpolation0, 10.2);
      AnalyticModelFromCurvesAndVols analyticModelFromCurvesAndVols0 = new AnalyticModelFromCurvesAndVols();
      double double0 = discountCurveFromForwardCurve0.getDiscountFactor((AnalyticModel) analyticModelFromCurvesAndVols0, 2704.6094876);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2.0);
      doubleArray0[2] = 2267.4991952;
      doubleArray0[3] = 2613.4206;
      doubleArray0[4] = 2276.0;
      doubleArray0[5] = 1.1415525114155251E-4;
      doubleArray0[6] = 4445.21314314624;
      doubleArray0[7] = 52.0;
      ForwardCurveInterpolation forwardCurveInterpolation0 = ForwardCurveInterpolation.createForwardCurveFromDiscountFactors("", doubleArray0, doubleArray0, 827.8324631071984);
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve(forwardCurveInterpolation0);
      AnalyticModelFromCurvesAndVols analyticModelFromCurvesAndVols0 = new AnalyticModelFromCurvesAndVols();
      double double0 = discountCurveFromForwardCurve0.getDiscountFactor((AnalyticModel) analyticModelFromCurvesAndVols0, 4445.21314314624);
      assertEquals((-4.935340113001716E-8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2.0);
      doubleArray0[1] = 827.8324631071984;
      doubleArray0[3] = 2613.4206;
      doubleArray0[4] = 2276.0;
      doubleArray0[5] = 1.1415525114155251E-4;
      doubleArray0[6] = 4445.21314314624;
      ForwardCurveInterpolation forwardCurveInterpolation0 = ForwardCurveInterpolation.createForwardCurveFromDiscountFactors("", doubleArray0, doubleArray0, 827.8324631071984);
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve(forwardCurveInterpolation0);
      double double0 = discountCurveFromForwardCurve0.getDiscountFactor(1062.0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      double[] doubleArray0 = new double[0];
      LinkedHashSet<Curve> linkedHashSet0 = new LinkedHashSet<Curve>();
      AnalyticModelFromCurvesAndVols analyticModelFromCurvesAndVols0 = new AnalyticModelFromCurvesAndVols(localDate0, linkedHashSet0);
      ForwardCurveInterpolation forwardCurveInterpolation0 = ForwardCurveInterpolation.createForwardCurveFromForwards((String) null, doubleArray0, doubleArray0, (AnalyticModel) analyticModelFromCurvesAndVols0, "", 1203.2253666);
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve(forwardCurveInterpolation0, (-580.9458458052371));
      forwardCurveInterpolation0.addPoint(9.430802898474, 1203.2253666, false);
      double double0 = discountCurveFromForwardCurve0.getDiscountFactor(945.9381467385214);
      assertEquals((-1.5123580814051911E-9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 3443.25616792896;
      doubleArray0[2] = (-3959.0);
      ForwardCurveInterpolation forwardCurveInterpolation0 = ForwardCurveInterpolation.createForwardCurveFromDiscountFactors("z", doubleArray0, doubleArray0, 0.19999954104423523);
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve(forwardCurveInterpolation0);
      HashSet<Curve> hashSet0 = new HashSet<Curve>();
      AnalyticModelFromCurvesAndVols analyticModelFromCurvesAndVols0 = new AnalyticModelFromCurvesAndVols(hashSet0);
      // Undeclared exception!
      discountCurveFromForwardCurve0.getValue((AnalyticModel) analyticModelFromCurvesAndVols0, 3003.646021);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      AnalyticModelFromCurvesAndVols analyticModelFromCurvesAndVols0 = new AnalyticModelFromCurvesAndVols();
      ForwardCurveInterpolation forwardCurveInterpolation0 = ForwardCurveInterpolation.createForwardCurveFromForwards("wY", doubleArray0, doubleArray0, (AnalyticModel) analyticModelFromCurvesAndVols0, "wY", (-61.125));
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve(forwardCurveInterpolation0);
      // Undeclared exception!
      try { 
        discountCurveFromForwardCurve0.getValue((AnalyticModel) analyticModelFromCurvesAndVols0, 3544.6353115);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Trying to calculate a discount curve from a forward curve with non-positive payment offset.
         //
         verifyException("net.finmath.marketdata.model.curves.DiscountCurveFromForwardCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Period period0 = Period.of((-1183), 876, (-1183));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      BusinessdayCalendarExcludingLONHolidays businessdayCalendarExcludingLONHolidays0 = new BusinessdayCalendarExcludingLONHolidays();
      BusinessdayCalendar.DateRollConvention businessdayCalendar_DateRollConvention0 = BusinessdayCalendar.DateRollConvention.MODIFIED_FOLLOWING;
      DayCountConvention_ACT_ACT_YEARFRAC dayCountConvention_ACT_ACT_YEARFRAC0 = new DayCountConvention_ACT_ACT_YEARFRAC();
      ForwardCurveFromDiscountCurve forwardCurveFromDiscountCurve0 = new ForwardCurveFromDiscountCurve("", "", (String) null, localDate0, "ymIX$}Aka)N_$x9", businessdayCalendarExcludingLONHolidays0, businessdayCalendar_DateRollConvention0, dayCountConvention_ACT_ACT_YEARFRAC0, 1883.164870234);
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve(forwardCurveFromDiscountCurve0, 1883.164870234);
      AnalyticModelFromCurvesAndVols analyticModelFromCurvesAndVols0 = new AnalyticModelFromCurvesAndVols();
      // Undeclared exception!
      try { 
        discountCurveFromForwardCurve0.getValue((AnalyticModel) analyticModelFromCurvesAndVols0, 10.2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AnalyticModelFromCurvesAndVols analyticModelFromCurvesAndVols0 = new AnalyticModelFromCurvesAndVols((LocalDate) null);
      ForwardCurveFromDiscountCurve forwardCurveFromDiscountCurve0 = new ForwardCurveFromDiscountCurve(" ", "AnalyticModelFromCurvesAndVols: referenceDate=null, curves=[], volatilitySurfaces=[]", (LocalDate) null, " ");
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve(forwardCurveFromDiscountCurve0, (-3959.0));
      // Undeclared exception!
      try { 
        discountCurveFromForwardCurve0.getValue((AnalyticModel) analyticModelFromCurvesAndVols0, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.time.businessdaycalendar.BusinessdayCalendarExcludingWeekends", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Period period0 = Period.of((-960), 693, 328);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      BusinessdayCalendarExcludingNYCHolidays businessdayCalendarExcludingNYCHolidays0 = new BusinessdayCalendarExcludingNYCHolidays();
      BusinessdayCalendarExcludingLONHolidays businessdayCalendarExcludingLONHolidays0 = new BusinessdayCalendarExcludingLONHolidays(businessdayCalendarExcludingNYCHolidays0);
      BusinessdayCalendar.DateRollConvention businessdayCalendar_DateRollConvention0 = BusinessdayCalendar.DateRollConvention.MODIFIED_FOLLOWING;
      ForwardCurveFromDiscountCurve forwardCurveFromDiscountCurve0 = new ForwardCurveFromDiscountCurve("", "h?@K,KI2[g$-o>oRpBs", ")", localDate0, "h?@K,KI2[g$-o>oRpBs", businessdayCalendarExcludingLONHolidays0, businessdayCalendar_DateRollConvention0, 1.0, 693);
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve(forwardCurveFromDiscountCurve0);
      // Undeclared exception!
      try { 
        discountCurveFromForwardCurve0.getDiscountFactor((AnalyticModel) null, (double) 328);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      ForwardCurveInterpolation.InterpolationEntityForward forwardCurveInterpolation_InterpolationEntityForward0 = ForwardCurveInterpolation.InterpolationEntityForward.FORWARD_TIMES_DISCOUNTFACTOR;
      ForwardCurveInterpolation forwardCurveInterpolation0 = new ForwardCurveInterpolation("27/05/2030", localDate0, "27/05/2030", forwardCurveInterpolation_InterpolationEntityForward0, "27/05/2030");
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve(forwardCurveInterpolation0);
      // Undeclared exception!
      try { 
        discountCurveFromForwardCurve0.getDiscountFactor(365.0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ForwardCurveFromDiscountCurve forwardCurveFromDiscountCurve0 = new ForwardCurveFromDiscountCurve("", "AnalyticModelFromCurvesAndVols: referenceDate=null, curves=[], volatilitySurfaces=[]", (LocalDate) null, "");
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve(forwardCurveFromDiscountCurve0, (-3959.0));
      // Undeclared exception!
      try { 
        discountCurveFromForwardCurve0.getDiscountFactor(621.698);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.time.businessdaycalendar.BusinessdayCalendarExcludingWeekends", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = null;
      try {
        discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve((ForwardCurve) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.marketdata.model.curves.DiscountCurveFromForwardCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1752L));
      ForwardCurveInterpolation.InterpolationEntityForward forwardCurveInterpolation_InterpolationEntityForward0 = ForwardCurveInterpolation.InterpolationEntityForward.FORWARD;
      ForwardCurveInterpolation forwardCurveInterpolation0 = new ForwardCurveInterpolation("", localDate0, "", forwardCurveInterpolation_InterpolationEntityForward0, "");
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve(forwardCurveInterpolation0);
      Vector<Curve> vector0 = new Vector<Curve>();
      AnalyticModelFromCurvesAndVols analyticModelFromCurvesAndVols0 = new AnalyticModelFromCurvesAndVols(vector0);
      // Undeclared exception!
      try { 
        discountCurveFromForwardCurve0.getDiscountFactor((AnalyticModel) analyticModelFromCurvesAndVols0, 1980.0360466486);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Trying to calculate a discount curve from a forward curve with non-positive payment offset.
         //
         verifyException("net.finmath.marketdata.model.curves.DiscountCurveFromForwardCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ForwardCurveInterpolation.InterpolationEntityForward forwardCurveInterpolation_InterpolationEntityForward0 = ForwardCurveInterpolation.InterpolationEntityForward.DISCOUNTFACTOR;
      ForwardCurveInterpolation forwardCurveInterpolation0 = new ForwardCurveInterpolation("The curve ", 1463.50302, forwardCurveInterpolation_InterpolationEntityForward0, "The curve ");
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve(forwardCurveInterpolation0);
      // Undeclared exception!
      try { 
        discountCurveFromForwardCurve0.getDiscountFactor((AnalyticModel) null, 1463.50302);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Interpolation requested on curve with no points.
         //
         verifyException("net.finmath.interpolation.RationalFunctionInterpolation", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AnalyticModelFromCurvesAndVols analyticModelFromCurvesAndVols0 = new AnalyticModelFromCurvesAndVols((LocalDate) null);
      ForwardCurveFromDiscountCurve forwardCurveFromDiscountCurve0 = new ForwardCurveFromDiscountCurve(" ", "AnalyticModelFromCurvesAndVols: referenceDate=null, curves=[], volatilitySurfaces=[]", (LocalDate) null, " ");
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve(forwardCurveFromDiscountCurve0, (-3959.0));
      double double0 = discountCurveFromForwardCurve0.getDiscountFactor((AnalyticModel) analyticModelFromCurvesAndVols0, (-1764.645));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve("'zj");
      // Undeclared exception!
      try { 
        discountCurveFromForwardCurve0.getDiscountFactor((AnalyticModel) null, 1619.053375571527);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The curve DiscountCurveFromForwardCurve('zj) requires an AnalyticModel but none was provided.
         //
         verifyException("net.finmath.marketdata.model.curves.DiscountCurveFromForwardCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AnalyticModelFromCurvesAndVols analyticModelFromCurvesAndVols0 = new AnalyticModelFromCurvesAndVols((LocalDate) null);
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve("");
      // Undeclared exception!
      try { 
        discountCurveFromForwardCurve0.getDiscountFactor((AnalyticModel) analyticModelFromCurvesAndVols0, (-1764.645));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No forward curve given and no forward curve found in the model under the name .
         //
         verifyException("net.finmath.marketdata.model.curves.DiscountCurveFromForwardCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AnalyticModelFromCurvesAndVols analyticModelFromCurvesAndVols0 = new AnalyticModelFromCurvesAndVols((LocalDate) null);
      ForwardCurveFromDiscountCurve forwardCurveFromDiscountCurve0 = new ForwardCurveFromDiscountCurve("", "AnalyticModelFromCurvesAndVols: referenceDate=null, curves=[], volatilitySurfaces=[]", (LocalDate) null, "");
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve(forwardCurveFromDiscountCurve0, (-3959.0));
      // Undeclared exception!
      try { 
        discountCurveFromForwardCurve0.getDiscountFactor((AnalyticModel) analyticModelFromCurvesAndVols0, 163.9464088);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.time.businessdaycalendar.BusinessdayCalendarExcludingWeekends", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve("");
      Object object0 = discountCurveFromForwardCurve0.clone();
      boolean boolean0 = discountCurveFromForwardCurve0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve("");
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve1 = new DiscountCurveFromForwardCurve("AnalyticModelFromCurvesAndVols: referenceDate=null, curves=[], volatilitySurfaces=[]");
      boolean boolean0 = discountCurveFromForwardCurve0.equals(discountCurveFromForwardCurve1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      ForwardCurveInterpolation forwardCurveInterpolation0 = new ForwardCurveInterpolation("27/5/2030", localDate0, "27/5/2030", "27/5/2030");
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve(forwardCurveInterpolation0);
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve1 = new DiscountCurveFromForwardCurve("27/5/2030");
      boolean boolean0 = discountCurveFromForwardCurve0.equals(discountCurveFromForwardCurve1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      ForwardCurveInterpolation forwardCurveInterpolation0 = new ForwardCurveInterpolation("27/05/2030", localDate0, "27/05/2030", "27/05/2030");
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve("27/05/2030");
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve1 = new DiscountCurveFromForwardCurve(forwardCurveInterpolation0, 0.0);
      boolean boolean0 = discountCurveFromForwardCurve0.equals(discountCurveFromForwardCurve1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve((String) null);
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve1 = new DiscountCurveFromForwardCurve("AnalyticModelFromCurvesAndVols: referenceDate=null, curves=[], volatilitySurfaces=[]", (-3959.0));
      boolean boolean0 = discountCurveFromForwardCurve0.equals(discountCurveFromForwardCurve1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ForwardCurveFromDiscountCurve forwardCurveFromDiscountCurve0 = new ForwardCurveFromDiscountCurve("AnalyticModelFromCurvesAndVols: referenceDate=null, curves=[], volatilitySurfaces=[]", (LocalDate) null, "+");
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve(forwardCurveFromDiscountCurve0, (-3981.993820036485));
      boolean boolean0 = discountCurveFromForwardCurve0.equals(forwardCurveFromDiscountCurve0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve("C{u");
      boolean boolean0 = discountCurveFromForwardCurve0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ForwardCurveFromDiscountCurve forwardCurveFromDiscountCurve0 = new ForwardCurveFromDiscountCurve("", "AnalyticModelFromCurvesAndVols: referenceDate=null, curves=[], volatilitySurfaces=[]", (LocalDate) null, "");
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve(forwardCurveFromDiscountCurve0, (-3959.0));
      boolean boolean0 = discountCurveFromForwardCurve0.equals(discountCurveFromForwardCurve0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      ForwardCurveInterpolation.InterpolationEntityForward forwardCurveInterpolation_InterpolationEntityForward0 = ForwardCurveInterpolation.InterpolationEntityForward.FORWARD_TIMES_DISCOUNTFACTOR;
      ForwardCurveInterpolation forwardCurveInterpolation0 = new ForwardCurveInterpolation("27/05/2030", localDate0, "27/05/2030", forwardCurveInterpolation_InterpolationEntityForward0, "27/05/2030");
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve(forwardCurveInterpolation0);
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve1 = new DiscountCurveFromForwardCurve(forwardCurveInterpolation0, 0.0);
      boolean boolean0 = discountCurveFromForwardCurve0.equals(discountCurveFromForwardCurve1);
      assertFalse(boolean0);
      assertFalse(discountCurveFromForwardCurve1.equals((Object)discountCurveFromForwardCurve0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve("yj1Mxvf/6z");
      discountCurveFromForwardCurve0.hashCode();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ForwardCurveFromDiscountCurve forwardCurveFromDiscountCurve0 = new ForwardCurveFromDiscountCurve("", "AnalyticModelFromCurvesAndVols: referenceDate=null, curves=[], volatilitySurfaces=[]", (LocalDate) null, "");
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve(forwardCurveFromDiscountCurve0, (-3959.0));
      discountCurveFromForwardCurve0.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2147483648L);
      BusinessdayCalendarAny businessdayCalendarAny0 = new BusinessdayCalendarAny();
      BusinessdayCalendar.DateRollConvention businessdayCalendar_DateRollConvention0 = BusinessdayCalendar.DateRollConvention.PRECEDING;
      CurveInterpolation.InterpolationMethod curveInterpolation_InterpolationMethod0 = CurveInterpolation.InterpolationMethod.CUBIC_SPLINE;
      CurveInterpolation.ExtrapolationMethod curveInterpolation_ExtrapolationMethod0 = CurveInterpolation.ExtrapolationMethod.DEFAULT;
      CurveInterpolation.InterpolationEntity curveInterpolation_InterpolationEntity0 = CurveInterpolation.InterpolationEntity.LOG_OF_VALUE_PER_TIME;
      ForwardCurveInterpolation.InterpolationEntityForward forwardCurveInterpolation_InterpolationEntityForward0 = ForwardCurveInterpolation.InterpolationEntityForward.FORWARD_TIMES_DISCOUNTFACTOR;
      ForwardCurveInterpolation forwardCurveInterpolation0 = new ForwardCurveInterpolation((String) null, localDate0, (String) null, businessdayCalendarAny0, businessdayCalendar_DateRollConvention0, curveInterpolation_InterpolationMethod0, curveInterpolation_ExtrapolationMethod0, curveInterpolation_InterpolationEntity0, forwardCurveInterpolation_InterpolationEntityForward0, (String) null);
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve(forwardCurveInterpolation0);
      Curve[] curveArray0 = new Curve[7];
      curveArray0[0] = (Curve) discountCurveFromForwardCurve0;
      curveArray0[1] = (Curve) discountCurveFromForwardCurve0;
      curveArray0[2] = (Curve) forwardCurveInterpolation0;
      curveArray0[3] = (Curve) discountCurveFromForwardCurve0;
      double[] doubleArray0 = new double[7];
      boolean[] booleanArray0 = new boolean[7];
      DiscountCurveInterpolation discountCurveInterpolation0 = DiscountCurveInterpolation.createDiscountCurveFromZeroRates((String) null, localDate0, doubleArray0, doubleArray0, booleanArray0, curveInterpolation_InterpolationMethod0, curveInterpolation_ExtrapolationMethod0, curveInterpolation_InterpolationEntity0);
      curveArray0[4] = (Curve) discountCurveInterpolation0;
      curveArray0[5] = (Curve) forwardCurveInterpolation0;
      curveArray0[6] = (Curve) forwardCurveInterpolation0;
      AnalyticModelFromCurvesAndVols analyticModelFromCurvesAndVols0 = new AnalyticModelFromCurvesAndVols(localDate0, curveArray0);
      // Undeclared exception!
      try { 
        discountCurveFromForwardCurve0.getValue((AnalyticModel) analyticModelFromCurvesAndVols0, 365.39031879252644);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.interpolation.RationalFunctionInterpolation", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      BusinessdayCalendarExcludingLONHolidays businessdayCalendarExcludingLONHolidays0 = new BusinessdayCalendarExcludingLONHolidays();
      BusinessdayCalendar.DateRollConvention businessdayCalendar_DateRollConvention0 = BusinessdayCalendar.DateRollConvention.MODIFIED_PRECEDING;
      DayCountConvention_30E_360_ISDA dayCountConvention_30E_360_ISDA0 = new DayCountConvention_30E_360_ISDA();
      double[] doubleArray0 = new double[7];
      ForwardCurveNelsonSiegelSvensson forwardCurveNelsonSiegelSvensson0 = new ForwardCurveNelsonSiegelSvensson("", localDate0, "", businessdayCalendarExcludingLONHolidays0, businessdayCalendar_DateRollConvention0, dayCountConvention_30E_360_ISDA0, doubleArray0, 943.85107702, (-534.8497796829184));
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve(forwardCurveNelsonSiegelSvensson0);
      // Undeclared exception!
      try { 
        discountCurveFromForwardCurve0.getDiscountFactor(2725.5533524825782);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Trying to calculate a discount curve from a forward curve with non-positive payment offset.
         //
         verifyException("net.finmath.marketdata.model.curves.DiscountCurveFromForwardCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AnalyticModelFromCurvesAndVols analyticModelFromCurvesAndVols0 = new AnalyticModelFromCurvesAndVols((LocalDate) null);
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve((String) null);
      // Undeclared exception!
      try { 
        discountCurveFromForwardCurve0.getValue((AnalyticModel) analyticModelFromCurvesAndVols0, 2013.439895206);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No forward curve given and no forward curve found in the model under the name null.
         //
         verifyException("net.finmath.marketdata.model.curves.DiscountCurveFromForwardCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve("27/5/2030");
      // Undeclared exception!
      try { 
        discountCurveFromForwardCurve0.getDiscountFactor(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The curve DiscountCurveFromForwardCurve(27/5/2030) requires an AnalyticModel but none was provided.
         //
         verifyException("net.finmath.marketdata.model.curves.DiscountCurveFromForwardCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      BusinessdayCalendarExcludingLONHolidays businessdayCalendarExcludingLONHolidays0 = new BusinessdayCalendarExcludingLONHolidays();
      BusinessdayCalendar.DateRollConvention businessdayCalendar_DateRollConvention0 = BusinessdayCalendar.DateRollConvention.MODIFIED_PRECEDING;
      DayCountConvention_30E_360_ISDA dayCountConvention_30E_360_ISDA0 = new DayCountConvention_30E_360_ISDA();
      double[] doubleArray0 = new double[7];
      ForwardCurveNelsonSiegelSvensson forwardCurveNelsonSiegelSvensson0 = new ForwardCurveNelsonSiegelSvensson("", localDate0, "", businessdayCalendarExcludingLONHolidays0, businessdayCalendar_DateRollConvention0, dayCountConvention_30E_360_ISDA0, doubleArray0, 943.85107702, (-534.8497796829184));
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve(forwardCurveNelsonSiegelSvensson0);
      AnalyticModelFromCurvesAndVols analyticModelFromCurvesAndVols0 = new AnalyticModelFromCurvesAndVols(localDate0);
      double double0 = discountCurveFromForwardCurve0.getValue((AnalyticModel) analyticModelFromCurvesAndVols0, (-1312.54019864));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      BusinessdayCalendarExcludingLONHolidays businessdayCalendarExcludingLONHolidays0 = new BusinessdayCalendarExcludingLONHolidays();
      BusinessdayCalendar.DateRollConvention businessdayCalendar_DateRollConvention0 = BusinessdayCalendar.DateRollConvention.MODIFIED_PRECEDING;
      DayCountConvention_30E_360_ISDA dayCountConvention_30E_360_ISDA0 = new DayCountConvention_30E_360_ISDA();
      double[] doubleArray0 = new double[7];
      ForwardCurveNelsonSiegelSvensson forwardCurveNelsonSiegelSvensson0 = new ForwardCurveNelsonSiegelSvensson("", localDate0, "", businessdayCalendarExcludingLONHolidays0, businessdayCalendar_DateRollConvention0, dayCountConvention_30E_360_ISDA0, doubleArray0, 943.85107702, (-534.8497796829184));
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve(forwardCurveNelsonSiegelSvensson0);
      double[] doubleArray1 = discountCurveFromForwardCurve0.getParameter();
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve("27/05/2030");
      try { 
        discountCurveFromForwardCurve0.getCloneBuilder();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.marketdata.model.curves.DiscountCurveFromForwardCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ForwardCurveInterpolation.InterpolationEntityForward forwardCurveInterpolation_InterpolationEntityForward0 = ForwardCurveInterpolation.InterpolationEntityForward.ZERO;
      ForwardCurveInterpolation forwardCurveInterpolation0 = new ForwardCurveInterpolation("", (-3605.6038609234124), forwardCurveInterpolation_InterpolationEntityForward0, "");
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve(forwardCurveInterpolation0);
      double double0 = discountCurveFromForwardCurve0.getDiscountFactor((-3605.6038609234124));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve("yj1Mxvf/6z");
      double[] doubleArray0 = new double[1];
      discountCurveFromForwardCurve0.setParameter(doubleArray0);
      assertEquals("DiscountCurveFromForwardCurve(yj1Mxvf/6z)", discountCurveFromForwardCurve0.getName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DiscountCurveFromForwardCurve discountCurveFromForwardCurve0 = null;
      try {
        discountCurveFromForwardCurve0 = new DiscountCurveFromForwardCurve((ForwardCurve) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.finmath.marketdata.model.curves.DiscountCurveFromForwardCurve", e);
      }
  }
}
